[
    {
        "text": "Authors\n=======\n\n[Grip][home] is written and maintained by Joe Esposito,\nalong with the following contributors:\n\n- Vlad Wing ([@vladwing](https://github.com/vladwing))\n- Ismail Badawi ([@isbadawi](https://github.com/isbadawi))\n- Joe Littlejohn ([@joelittlejohn](https://github.com/joelittlejohn))\n- Brian Cappello ([@briancappello](https://github.com/briancappello))\n- John Gallagher ([@jgallagher](https://github.com/jgallagher))\n- Ilya Rumyantsev ([@iliggio](https://github.com/iliggio))\n- Jon Chen",
        "file": "/Users/akash/Workspace/assignments/code-qa-api/data/grip-no-tests/AUTHORS.md",
        "start_idx": 0
    },
    {
        "text": " ([@fly](https://github.com/fly))\n- Silas Snider ([@swsnider](https://github.com/swsnider))\n- Dave James Miller ([@davejamesmiller](https://github.com/davejamesmiller))\n- Alexandre Magno ([@alexandre-mbm](https://github.com/alexandre-mbm))\n- [@madflow](https://github.com/madflow)\n- Zhiming Wang ([@zmwangx](https://github.com/zmwangx))\n- Dan Davison ([@dandavison](https://github.com/dandavison))\n- Sriram Sundarraj ([@ssundarraj](https://github.com/ssundarraj))\n- Jose Honorato ([@jlhonora](https:/",
        "file": "/Users/akash/Workspace/assignments/code-qa-api/data/grip-no-tests/AUTHORS.md",
        "start_idx": 500
    },
    {
        "text": "/github.com/jlhonora))\n- Aka.Why ([@akawhy](https://github.com/akawhy))\n- Mark Thomas ([@markbt](https://github.com/markbt))\n- Gast\u00f3n N. Charkiewicz ([@mekoda](https://github.com/mekoda))\n- Erik Hummel ([@ErikMHummel](https://github.com/ErikMHummel))\n- Matthew R. Tanudjaja ([@mrexmelle](https://github.com/mrexmelle))\n- Tom Dunlap ([@motevets](https://github.com/motevets))\n- Konstantin Baierer ([@kba](https://github.com/kba))\n- Jakub Wilk ([@jwilk](https://github.com/jwilk))\n- Devin Chen ([@xxd3v",
        "file": "/Users/akash/Workspace/assignments/code-qa-api/data/grip-no-tests/AUTHORS.md",
        "start_idx": 1000
    },
    {
        "text": "in](https://github.com/xxd3vin))\n- Jamie Davis ([@davisjam](https://github.com/davisjam))\n- JasonThomasData ([@JasonThomasData](https://github.com/JasonThomasData))\n- Andrej ([@4ndrej](https://github.com/4ndrej))\n- Karl Goffin ([@kagof](https://github.com/kagof))\n- Gideon Richter ([@Godron629](https://github.com/Godron629))\n- Tom Dupr\u00e9 la Tour ([@TomDLT](https://github.com/TomDLT))\n- Joshua Adelman ([@synapticarbors](https://github.com/synapticarbors))\n- Simeon Visser ([@svisser](https://github.",
        "file": "/Users/akash/Workspace/assignments/code-qa-api/data/grip-no-tests/AUTHORS.md",
        "start_idx": 1500
    },
    {
        "text": "com/svisser))\n- Jace Browning ([@jacebrowning](https://github.com/jacebrowning))\n- Daniel Shannon ([@phyllisstein](https://github.com/phyllisstein))\n- Aaron Sikes ([@courajs](https://github.com/courajs))\n- Winsley ([@wvspee](https://github.com/wvspee))\n- Methacrylon ([@Methacrylon](https://github.com/Methacrylon))\n- Bryce Carson ([@Methacrylon](https://github.com/bryce-carson))\n\n\n[home]: README.md\n",
        "file": "/Users/akash/Workspace/assignments/code-qa-api/data/grip-no-tests/AUTHORS.md",
        "start_idx": 2000
    },
    {
        "text": "docopt>=0.4.0\nFlask>=0.10.1\nMarkdown>=2.5.1\npath-and-address>=2.0.1\nPygments>=1.6\nrequests>=2.4.1\nWerkzeug>=0.7\n",
        "file": "/Users/akash/Workspace/assignments/code-qa-api/data/grip-no-tests/requirements.txt",
        "start_idx": 0
    },
    {
        "text": "responses>=0.5.0\nflake8>=3.0.0\npytest>=4.4.1\n",
        "file": "/Users/akash/Workspace/assignments/code-qa-api/data/grip-no-tests/requirements-test.txt",
        "start_idx": 0
    },
    {
        "text": "Grip -- GitHub Readme Instant Preview\n=====================================\n\n[![Current version on PyPI](http://img.shields.io/pypi/v/grip.svg)][pypi]\n[![Say Thanks!](https://img.shields.io/badge/Say%20Thanks-!-1EAEDB.svg)](https://saythanks.io/to/joeyespo)\n\nRender local readme files before sending off to GitHub.\n\nGrip is a command-line server application written in Python that uses the\n[GitHub markdown API][markdown] to render a local readme file. The styles\nand rendering come directly from Git",
        "file": "/Users/akash/Workspace/assignments/code-qa-api/data/grip-no-tests/README.md",
        "start_idx": 0
    },
    {
        "text": "Hub, so you'll know exactly how it will appear.\nChanges you make to the Readme will be instantly reflected in the browser without\nrequiring a page refresh.\n\n\nMotivation\n----------\n\nSometimes you just want to see the exact readme\nresult before committing and pushing to GitHub.\n\nEspecially when doing [Readme-driven development][rdd].\n\n\nInstallation\n------------\n\nTo install grip, simply:\n\n```console\n$ pip install grip\n```\n\nOn OS X, you can also install with Homebrew:\n\n```console\n$ brew install grip",
        "file": "/Users/akash/Workspace/assignments/code-qa-api/data/grip-no-tests/README.md",
        "start_idx": 500
    },
    {
        "text": "\n```\n\n\nUsage\n-----\n\nTo render the readme of a repository:\n\n```console\n$ cd myrepo\n$ grip\n * Running on http://localhost:6419/\n```\n\nNow open a browser and visit [http://localhost:6419](http://localhost:6419/).\nOr run with `-b` and Grip will open a new browser tab for you.\n\nYou can also specify a port:\n\n```console\n$ grip 80\n * Running on http://localhost:80/\n```\n\nOr an explicit file:\n\n```console\n$ grip AUTHORS.md\n * Running on http://localhost:6419/\n```\n\nAlternatively, you could just run `grip` an",
        "file": "/Users/akash/Workspace/assignments/code-qa-api/data/grip-no-tests/README.md",
        "start_idx": 1000
    },
    {
        "text": "d visit [localhost:6419/AUTHORS.md][AUTHORS.md]\nsince grip supports relative URLs.\n\nYou can combine the previous examples. Or specify a hostname instead of a port. Or provide both.\n\n```console\n$ grip AUTHORS.md 80\n * Running on http://localhost:80/\n```\n\n```console\n$ grip CHANGES.md 0.0.0.0\n * Running on http://0.0.0.0:6419/\n```\n\n```console\n$ grip . 0.0.0.0:80\n * Running on http://0.0.0.0:80/\n```\n\nYou can even bypass the server and **export** to a single HTML file, with all the styles and assets ",
        "file": "/Users/akash/Workspace/assignments/code-qa-api/data/grip-no-tests/README.md",
        "start_idx": 1500
    },
    {
        "text": "inlined:\n\n```console\n$ grip --export\nExporting to README.html\n```\n\nControl the output name with the second argument:\n\n```console\n$ grip README.md --export index.html\nExporting to index.html\n```\n\nIf you're exporting a bunch of files, you can prevent styles from being inlining to save space with `--no-inline`:\n\n```console\n$ grip README.md --export --no-inline introduction.html\nExporting to introduction.html\n```\n\nReading and writing from **stdin** and **stdout** is also supported, allowing you to u",
        "file": "/Users/akash/Workspace/assignments/code-qa-api/data/grip-no-tests/README.md",
        "start_idx": 2000
    },
    {
        "text": "se Grip with other programs:\n\n```console\n$ cat README.md | grip -\n * Running on http://localhost:6419/\n```\n\n```console\n$ grip AUTHORS.md --export - | bcat\n```\n\n```console\n$ cat README.md | grip --export - | less\n```\n\nThis allows you to quickly test how things look by entering Markdown directly in your terminal:\n\n```console\n$ grip -\nHello **world**!\n^D\n * Running on http://localhost:6419/\n```\n\n*Note: `^D` means `Ctrl+D`, which works on Linux and OS X. On Windows you'll have to use `Ctrl+Z`.*\n\nRen",
        "file": "/Users/akash/Workspace/assignments/code-qa-api/data/grip-no-tests/README.md",
        "start_idx": 2500
    },
    {
        "text": "dering as user-content like **comments** and **issues** is also supported, with an optional repository context for linking to issues:\n\n```console\n$ grip --user-content --context=joeyespo/grip\n * Running on http://localhost:6419/\n```\n\nFor more details and additional options, see the help:\n\n```console\n$ grip -h\n```\n\n\nAccess\n------\n\nGrip strives to be as close to GitHub as possible. To accomplish this, grip\nuses [GitHub's Markdown API][markdown] so that changes to their rendering\nengine are reflect",
        "file": "/Users/akash/Workspace/assignments/code-qa-api/data/grip-no-tests/README.md",
        "start_idx": 3000
    },
    {
        "text": "ed immediately without requiring you to upgrade grip.\nHowever, because of this you may hit the API's hourly rate limit. If this\nhappens, grip offers a way to access the API using your credentials\nto unlock a much higher rate limit.\n\n```console\n$ grip --user <your-username> --pass <your-password>\n```\n\nOr use a [personal access token][] with an empty scope (note that a token is\n*required* if your GitHub account is set up with two-factor authentication):\n\n```console\n$ grip --pass <token>\n```\n\nYou c",
        "file": "/Users/akash/Workspace/assignments/code-qa-api/data/grip-no-tests/README.md",
        "start_idx": 3500
    },
    {
        "text": "an persist these options [in your local configuration](#configuration).\nFor security purposes, it's highly recommended that you **use an access token\nover a password**. (You could also keep your password safe by configuring\nGrip to [grab your password from a password manager][keychain-access].)\n\nThere's also a [work-in-progress branch][offline-renderer] to provide\n**offline rendering**. Once this resembles GitHub more precisely, it'll\nbe exposed in the CLI, and will ultimately be used as a seaml",
        "file": "/Users/akash/Workspace/assignments/code-qa-api/data/grip-no-tests/README.md",
        "start_idx": 4000
    },
    {
        "text": "ess fallback\nengine for when the API can't be accessed.\n\nGrip always accesses GitHub over HTTPS,\nso your README and credentials are protected.\n\n\nTips\n----\n\nHere's how others from the community are using Grip.\n\nWant to share your own? [Say hello @joeyespo][twitter] or [submit a pull request](#contributing).\n\n\n#### Create a local mirror of a Github Wiki\n\n```console\n$ git clone https://github.com/YOUR_USERNAME/YOUR_REPOSITORY.wiki.git\n$ cd YOUR_REPOSITORY.wiki\n$ grip\n```\n\n*By [Joshua Gourneau](http",
        "file": "/Users/akash/Workspace/assignments/code-qa-api/data/grip-no-tests/README.md",
        "start_idx": 4500
    },
    {
        "text": "s://twitter.com/gourneau/status/636329126643658753).*\n\n\n#### Generate HTML documentation from a collection of linked README files\n\n1. Enter the directory:\n\n   ```console\n   $ cd YOUR_DIR\n   $ export GRIPURL=$(pwd)\n   ```\n\n2. Include all assets by setting the `CACHE_DIRECTORY` [config variable](#configuration):\n\n   ```console\n   $ echo \"CACHE_DIRECTORY = '$(pwd)/assets'\" >> ~/.grip/settings.py\n   ```\n\n3. Export all your Markdown files with Grip and replace absolute asset paths with relative paths",
        "file": "/Users/akash/Workspace/assignments/code-qa-api/data/grip-no-tests/README.md",
        "start_idx": 5000
    },
    {
        "text": ":\n\n   ```console\n   $ for f in *.md; do grip --export $f --no-inline; done\n   $ for f in *.html; do sed -i '' \"s?$GRIPURL/??g\" $f; done\n   ```\n\nYou can optionally compress the set of HTML files to `docs.tgz` with:\n\n   ```console\n   $ tar -czvf docs.tgz `ls | grep [\\.]html$` assets\n   ```\n\nLooking for a cross platform solution? Here's an equivalent [Python script](https://gist.github.com/mrexmelle/659abc02ae1295d60647).\n\n*By [Matthew R. Tanudjaja](https://github.com/mrexmelle).*\n\n\nConfiguration\n-",
        "file": "/Users/akash/Workspace/assignments/code-qa-api/data/grip-no-tests/README.md",
        "start_idx": 5500
    },
    {
        "text": "------------\n\nTo customize Grip, create `~/.grip/settings.py`, then add one or more of the following variables:\n\n- `HOST`: The host to use when not provided as a CLI argument, `localhost` by default\n- `PORT`: The port to use when not provided as a CLI argument, `6419` by default\n- `DEBUG`: Whether to use Flask's debugger when an error happens, `False` by default\n- `DEBUG_GRIP`: Prints extended information when an error happens, `False` by default\n- `API_URL`: Base URL for the github API, for exa",
        "file": "/Users/akash/Workspace/assignments/code-qa-api/data/grip-no-tests/README.md",
        "start_idx": 6000
    },
    {
        "text": "mple that of a Github Enterprise instance. `https://api.github.com` by default\n- `CACHE_DIRECTORY`: The directory, relative to `~/.grip`, to place cached assets (this gets run through the following filter: `CACHE_DIRECTORY.format(version=__version__)`), `'cache-{version}'` by default\n- `AUTOREFRESH`: Whether to automatically refresh the Readme content when the file changes, `True` by default\n- `QUIET`: Do not print extended information, `False` by default\n- `STYLE_URLS`: Additional URLs that wil",
        "file": "/Users/akash/Workspace/assignments/code-qa-api/data/grip-no-tests/README.md",
        "start_idx": 6500
    },
    {
        "text": "l be added to the rendered page, `[]` by default\n- `USERNAME`: The username to use when not provided as a CLI argument, `None` by default\n- `PASSWORD`: The password or [personal access token][] to use when not provided as a CLI argument (*Please don't save your passwords here.* Instead, use an access token or drop in this code [grab your password from a password manager][keychain-access]), `None` by default\n\nNote that this is a Python file. If you see `'X' is not defined` errors, you\nmay have ov",
        "file": "/Users/akash/Workspace/assignments/code-qa-api/data/grip-no-tests/README.md",
        "start_idx": 7000
    },
    {
        "text": "erlooked some quotes. For example:\n\n```py\nUSERNAME = 'your-username'\nPASSWORD = 'your-personal-access-token'\n```\n\n\n#### Environment variables\n\n- `GRIPHOME`: Specify an alternative `settings.py` location, `~/.grip` by default\n- `GRIPURL`: The URL of the Grip server, `/__/grip` by default\n\n#### Advanced\n\nThis file is a normal Python script, so you can add more advanced configuration.\n\nFor example, to read a setting from the environment and provide a default value\nwhen it's not set:\n\n```python\nPORT",
        "file": "/Users/akash/Workspace/assignments/code-qa-api/data/grip-no-tests/README.md",
        "start_idx": 7500
    },
    {
        "text": " = os.environ.get('GRIP_PORT', 8080)\n```\n\n\nAPI\n---\n\nYou can access the API directly with Python, using it in your own projects:\n\n```python\nfrom grip import serve\n\nserve(port=8080)\n * Running on http://localhost:8080/\n```\n\nRun main directly:\n\n```python\nfrom grip import main\n\nmain(argv=['-b', '8080'])\n * Running on http://localhost:8080/\n```\n\nOr access the underlying Flask application for even more flexibility:\n\n```python\nfrom grip import create_app\n\ngrip_app = create_app(user_content=True)\n# Use ",
        "file": "/Users/akash/Workspace/assignments/code-qa-api/data/grip-no-tests/README.md",
        "start_idx": 8000
    },
    {
        "text": "in your own app\n```\n\n\n### Documentation\n\n#### serve\n\nRuns a local server and renders the Readme file located\nat `path` when visited in the browser.\n\n```python\nserve(path=None, host=None, port=None, user_content=False, context=None, username=None, password=None, render_offline=False, render_wide=False, render_inline=False, api_url=None, title=None, autorefresh=True, browser=False, grip_class=None)\n```\n\n- `path`: The filename to render, or the directory containing your Readme file, defaulting to t",
        "file": "/Users/akash/Workspace/assignments/code-qa-api/data/grip-no-tests/README.md",
        "start_idx": 8500
    },
    {
        "text": "he current working directory\n- `host`: The host to listen on, defaulting to the HOST configuration variable\n- `port`: The port to listen on, defaulting to the PORT configuration variable\n- `user_content`: Whether to render a document as [user-content][] like user comments or issues\n- `context`: The project context to use when `user_content` is true, which\n             takes the form of `username/project`\n- `username`: The user to authenticate with GitHub to extend the API limit\n- `password`: The",
        "file": "/Users/akash/Workspace/assignments/code-qa-api/data/grip-no-tests/README.md",
        "start_idx": 9000
    },
    {
        "text": " password to authenticate with GitHub to extend the API limit\n- `render_offline`: Whether to render locally using [Python-Markdown][] (Note: this is a work in progress)\n- `render_wide`: Whether to render a wide page, `False` by default (this has no effect when used with `user_content`)\n- `render_inline`: Whether to inline the styles within the HTML file\n- `api_url`: A different base URL for the github API, for example that of a Github Enterprise instance. The default is the public API https://ap",
        "file": "/Users/akash/Workspace/assignments/code-qa-api/data/grip-no-tests/README.md",
        "start_idx": 9500
    },
    {
        "text": "i.github.com.\n- `title`: The page title, derived from `path` by default\n- `autorefresh`: Automatically update the rendered content when the Readme file changes, `True` by default\n- `browser`: Open a tab in the browser after the server starts., `False` by default\n- `grip_class`: Use a custom [Grip class](#class-gripflask)\n\n\n#### export\n\nWrites the specified Readme file to an HTML file with styles and assets inlined.\n\n```python\nexport(path=None, user_content=False, context=None, username=None, pas",
        "file": "/Users/akash/Workspace/assignments/code-qa-api/data/grip-no-tests/README.md",
        "start_idx": 10000
    },
    {
        "text": "sword=None, render_offline=False, render_wide=False, render_inline=True, out_filename=None, api_url=None, title=None, quiet=None, theme='light', grip_class=None)\n```\n\n- `path`: The filename to render, or the directory containing your Readme file, defaulting to the current working directory\n- `user_content`: Whether to render a document as [user-content][] like user comments or issues\n- `context`: The project context to use when `user_content` is true, which\n             takes the form of `userna",
        "file": "/Users/akash/Workspace/assignments/code-qa-api/data/grip-no-tests/README.md",
        "start_idx": 10500
    },
    {
        "text": "me/project`\n- `username`: The user to authenticate with GitHub to extend the API limit\n- `password`: The password to authenticate with GitHub to extend the API limit\n- `render_offline`: Whether to render locally using [Python-Markdown][] (Note: this is a work in progress)\n- `render_wide`: Whether to render a wide page, `False` by default (this has no effect when used with `user_content`)\n- `render_inline`: Whether to inline the styles within the HTML file (Note: unlike the other API functions, t",
        "file": "/Users/akash/Workspace/assignments/code-qa-api/data/grip-no-tests/README.md",
        "start_idx": 11000
    },
    {
        "text": "his defaults to `True`)\n- `out_filename`: The filename to write to, `<in_filename>.html` by default\n- `api_url`: A different base URL for the github API, for example that of a Github Enterprise instance. The default is the public API https://api.github.com.\n- `title`: The page title, derived from `path` by default\n- `quiet`: Do not print to the terminal\n- `theme`: Theme to view markdown file (light mode or dark mode). Valid options (\"light\", \"dark\"). Default: \"light\".\n- `grip_class`: Use a custo",
        "file": "/Users/akash/Workspace/assignments/code-qa-api/data/grip-no-tests/README.md",
        "start_idx": 11500
    },
    {
        "text": "m [Grip class](#class-gripflask)\n\n\n#### create_app\n\nCreates a Flask application you can use to render and serve the Readme files.\nThis is the same app used by `serve` and `export` and initializes the cache,\nusing the cached styles when available.\n\n```python\ncreate_app(path=None, user_content=False, context=None, username=None, password=None, render_offline=False, render_wide=False, render_inline=False, api_url=None, title=None, text=None, grip_class=None)\n```\n\n- `path`: The filename to render, o",
        "file": "/Users/akash/Workspace/assignments/code-qa-api/data/grip-no-tests/README.md",
        "start_idx": 12000
    },
    {
        "text": "r the directory containing your Readme file, defaulting to the current working directory\n- `user_content`: Whether to render a document as [user-content][] like user comments or issues\n- `context`: The project context to use when `user_content` is true, which\n             takes the form of `username/project`\n- `username`: The user to authenticate with GitHub to extend the API limit\n- `password`: The password to authenticate with GitHub to extend the API limit\n- `render_offline`: Whether to rende",
        "file": "/Users/akash/Workspace/assignments/code-qa-api/data/grip-no-tests/README.md",
        "start_idx": 12500
    },
    {
        "text": "r locally using [Python-Markdown][] (Note: this is a work in progress)\n- `render_wide`: Whether to render a wide page, `False` by default (this has no effect when used with `user_content`)\n- `render_inline`: Whether to inline the styles within the HTML file\n- `api_url`: A different base URL for the github API, for example that of a Github Enterprise instance. The default is the public API https://api.github.com.\n- `title`: The page title, derived from `path` by default\n- `text`: A string or stre",
        "file": "/Users/akash/Workspace/assignments/code-qa-api/data/grip-no-tests/README.md",
        "start_idx": 13000
    },
    {
        "text": "am of Markdown text to render instead of being loaded from `path` (Note: `path` can be used to set the page title)\n- `grip_class`: Use a custom [Grip class](#class-gripflask)\n\n\n#### render_app\n\nRenders the application created by `create_app` and returns the HTML that would\nnormally appear when visiting that route.\n\n```python\nrender_app(app, route='/')\n```\n\n- `app`: The Flask application to render\n- `route`: The route to render, '/' by default\n\n\n#### render_content\n\nRenders the specified markdown",
        "file": "/Users/akash/Workspace/assignments/code-qa-api/data/grip-no-tests/README.md",
        "start_idx": 13500
    },
    {
        "text": " text without caching.\n\n```python\nrender_content(text, user_content=False, context=None, username=None, password=None, render_offline=False, api_url=None, title=None)\n```\n\n- `text`: The Markdown text to render\n- `user_content`: Whether to render a document as [user-content][] like user comments or issues\n- `context`: The project context to use when `user_content` is true, which\n             takes the form of `username/project`\n- `username`: The user to authenticate with GitHub to extend the API ",
        "file": "/Users/akash/Workspace/assignments/code-qa-api/data/grip-no-tests/README.md",
        "start_idx": 14000
    },
    {
        "text": "limit\n- `password`: The password to authenticate with GitHub to extend the API limit\n- `render_offline`: Whether to render locally using [Python-Markdown][] (Note: this is a work in progress)\n- `api_url`: A different base URL for the github API, for example that of a Github Enterprise instance. This is required when not using the offline renderer.\n- `title`: The page title, derived from `path` by default\n\n\n#### render_page\n\nRenders the markdown from the specified path or text, without caching,\na",
        "file": "/Users/akash/Workspace/assignments/code-qa-api/data/grip-no-tests/README.md",
        "start_idx": 14500
    },
    {
        "text": "nd returns an HTML page that resembles the GitHub Readme view.\n\n```python\nrender_page(path=None, user_content=False, context=None, username=None, password=None, render_offline=False, render_wide=False, render_inline=False, api_url=None, title=None, text=None, quiet=None, theme='light', grip_class=None)\n```\n\n- `path`: The path to use for the page title, rendering `'README.md'` if None\n- `user_content`: Whether to render a document as [user-content][] like user comments or issues\n- `context`: The ",
        "file": "/Users/akash/Workspace/assignments/code-qa-api/data/grip-no-tests/README.md",
        "start_idx": 15000
    },
    {
        "text": "project context to use when `user_content` is true, which\n             takes the form of `username/project`\n- `username`: The user to authenticate with GitHub to extend the API limit\n- `password`: The password to authenticate with GitHub to extend the API limit\n- `render_offline`: Whether to render offline using [Python-Markdown][] (Note: this is a work in progress)\n- `render_wide`: Whether to render a wide page, `False` by default (this has no effect when used with `user_content`)\n- `render_inl",
        "file": "/Users/akash/Workspace/assignments/code-qa-api/data/grip-no-tests/README.md",
        "start_idx": 15500
    },
    {
        "text": "ine`: Whether to inline the styles within the HTML file\n- `api_url`: A different base URL for the github API, for example that of a Github Enterprise instance. The default is the public API https://api.github.com.\n- `title`: The page title, derived from `path` by default\n- `text`: A string or stream of Markdown text to render instead of being loaded from `path` (Note: `path` can be used to set the page title)\n- `quiet`: Do not print to the terminal\n- `theme`: Theme to view markdown file (light m",
        "file": "/Users/akash/Workspace/assignments/code-qa-api/data/grip-no-tests/README.md",
        "start_idx": 16000
    },
    {
        "text": "ode or dark mode). Valid options (\"light\", \"dark\"). Default: \"light\".\n- `grip_class`: Use a custom [Grip class](#class-gripflask)\n\n\n#### clear_cache\n\nClears the cached styles and assets.\n\n```python\nclear_cache(grip_class=None)\n```\n\n#### main\n\nRuns Grip with the specified arguments.\n\n```python\nmain(argv=None, force_utf8=True)\n```\n\n- `argv`: The arguments to run with, `sys.argv[1:]` by default\n- `force_utf8`: Sets the default encoding to `utf-8` in the current Python instance. This has no effect o",
        "file": "/Users/akash/Workspace/assignments/code-qa-api/data/grip-no-tests/README.md",
        "start_idx": 16500
    },
    {
        "text": "n Python 3 since Unicode is handled by default\n\n\n### Classes\n\n#### class Grip(Flask)\n\nA Flask application that can serve a file or directory containing a README.\n\n```python\nGrip(source=None, auth=None, renderer=None, assets=None, render_wide=None, render_inline=None, title=None, autorefresh=None, quiet=None, theme='light', grip_url=None, static_url_path=None, instance_path=None, **kwargs)\n```\n\n##### default_renderer\n\nReturns the default renderer using the current config. This is only used if\nren",
        "file": "/Users/akash/Workspace/assignments/code-qa-api/data/grip-no-tests/README.md",
        "start_idx": 17000
    },
    {
        "text": "derer is set to None in the constructor.\n\n```python\nGrip.default_renderer()\n```\n\n##### default_asset_manager\n\nReturns the default asset manager using the current config. This is only used\nif asset_manager is set to None in the constructor.\n\n```python\nGrip.default_asset_manager()\n```\n\n##### add_content_types\n\nAdds the application/x-font-woff and application/octet-stream content types if\nthey are missing. Override to add additional content types on initialization.\n\n```python\nGrip.add_content_types",
        "file": "/Users/akash/Workspace/assignments/code-qa-api/data/grip-no-tests/README.md",
        "start_idx": 17500
    },
    {
        "text": "()\n```\n\n##### clear_cache\n\nClears the downloaded assets.\n\n```python\nGrip.clear_cache()\n```\n\n##### render\n\nRenders the application and returns the HTML unicode that would normally appear\nwhen visiting in the browser.\n\n```python\nGrip.render(route=None)\n```\n\n- `route`: The route to render, `/` by default\n\n##### run\n\nStarts a server to render the README. This calls [Flask.run][] internally.\n\n```python\nGrip.run(host=None, port=None, debug=None, use_reloader=None, open_browser=False)\n```\n\n- `host`: Th",
        "file": "/Users/akash/Workspace/assignments/code-qa-api/data/grip-no-tests/README.md",
        "start_idx": 18000
    },
    {
        "text": "e hostname to listen on. Set this to `'0.0.0.0'` to have the server\n          available externally as well, `'localhost'` by default\n- `port`: The port of the webserver. Defaults to `6419`\n- `debug`: If given, enable or disable debug mode. See [Flask.debug][].\n- `use_reloader`: Should the server automatically restart the python process\n                  if modules were changed? `False` by default unless the\n                  `DEBUG_GRIP` setting is specified.\n- `open_browser`: Opens the browser ",
        "file": "/Users/akash/Workspace/assignments/code-qa-api/data/grip-no-tests/README.md",
        "start_idx": 18500
    },
    {
        "text": "to the address when the server starts\n\n\n#### class AlreadyRunningError(RuntimeError)\n\nRaised when `Grip.run` is called while the server is already running.\n\n```python\nAlreadyRunningError()\n```\n\n\n#### class ReadmeNotFoundError(NotFoundError or IOError)\n\nRaised when the specified Readme could not be found.\n\n```python\nReadmeNotFoundError(path=None, message=None)\n```\n\n\n#### class ReadmeAssetManager(object)\n\nManages the style and font assets rendered with Readme pages. This is an\nabstract base class.",
        "file": "/Users/akash/Workspace/assignments/code-qa-api/data/grip-no-tests/README.md",
        "start_idx": 19000
    },
    {
        "text": "\n\n```python\nReadmeAssetManager(cache_path, style_urls=None)\n```\n\n\n#### class GitHubAssetManager(ReadmeAssetManager)\n\nManages the style and font assets rendered with Readme pages. Set cache_path to\nNone to disable caching.\n\n\n#### class ReadmeReader(object)\n\nReads Readme content from a URL subpath. This is an abstract base class.\n\n```python\nReadmeReader()\n```\n\n\n#### class DirectoryReader(ReadmeReader)\n\nReads Readme files from URL subpaths.\n\n```python\nDirectoryReader(path=None, silent=False)\n```\n\n\n",
        "file": "/Users/akash/Workspace/assignments/code-qa-api/data/grip-no-tests/README.md",
        "start_idx": 19500
    },
    {
        "text": "#### class TextReader(ReadmeReader)\n\nReads Readme content from the provided unicode string.\n\n```python\nTextReader(text, display_filename=None)\n```\n\n\n#### class StdinReader(TextReader)\n\nReads Readme text from STDIN.\n\n```python\nStdinReader(display_filename=None)\n```\n\n\n#### class ReadmeRenderer(object)\n\nRenders the Readme. This is an abstract base class.\n\n```python\nReadmeRenderer(user_content=None, context=None)\n```\n\n\n#### class GitHubRenderer(ReadmeRenderer)\n\nRenders the specified Readme using the",
        "file": "/Users/akash/Workspace/assignments/code-qa-api/data/grip-no-tests/README.md",
        "start_idx": 20000
    },
    {
        "text": " GitHub Markdown API.\n\n```python\nGitHubRenderer(user_content=None, context=None, api_url=None, raw=None)\n```\n\n\n#### class OfflineRenderer(ReadmeRenderer)\n\nRenders the specified Readme locally using pure Python. Note: This is currently\nan incomplete feature.\n\n```python\nOfflineRenderer(user_content=None, context=None)\n```\n\n\n### Constants\n\n\n#### SUPPORTED_TITLES\n\nThe common Markdown file titles on GitHub.\n\n```python\nSUPPORTED_TITLES = ['README', 'Home']\n```\n\n- `filename`: The UTF-8 file to read.\n\n\n",
        "file": "/Users/akash/Workspace/assignments/code-qa-api/data/grip-no-tests/README.md",
        "start_idx": 20500
    },
    {
        "text": "#### SUPPORTED_EXTENSIONS\n\nThe supported extensions, as defined by [GitHub][markdown].\n\n```python\nSUPPORTED_EXTENSIONS = ['.md', '.markdown']\n```\n\n\n#### DEFAULT_FILENAMES\n\nThis constant contains the names Grip looks for when no file is provided.\n\n```python\nDEFAULT_FILENAMES = [title + ext\n                     for title in SUPPORTED_TITLES\n                     for ext in SUPPORTED_EXTENSIONS]\n```\n\n\n#### DEFAULT_FILENAME\n\nThis constant contains the default Readme filename, namely:\n\n```python\nDEFAU",
        "file": "/Users/akash/Workspace/assignments/code-qa-api/data/grip-no-tests/README.md",
        "start_idx": 21000
    },
    {
        "text": "LT_FILENAME = DEFAULT_FILENAMES[0]  # README.md\n```\n\n\n#### DEFAULT_GRIPHOME\n\nThis constant points to the default value if the `GRIPHOME`\n[environment variable](#environment-variables) is not specified.\n\n```python\nDEFAULT_GRIPHOME = '~/.grip'\n```\n\n\n#### DEFAULT_GRIPURL\n\nThe default URL of the Grip server and all its assets:\n\n```python\nDEFAULT_GRIPURL = '/__/grip'\n```\n\n\n#### DEFAULT_API_URL\n\nThe default app_url value:\n\n```python\nDEFAULT_API_URL = 'https://api.github.com'\n```\n\n\nTesting\n-------\n\nIns",
        "file": "/Users/akash/Workspace/assignments/code-qa-api/data/grip-no-tests/README.md",
        "start_idx": 21500
    },
    {
        "text": "tall the package and test requirements:\n\n```console\n$ pip install -e .[tests]\n```\n\nRun tests with [pytest][]:\n\n```console\n$ pytest\n```\n\nOr to re-run tests as you make changes, use [pytest-watch][]:\n\n```console\n$ ptw\n```\n\n\n#### External assumption tests\n\nIf you're experiencing a problem with Grip, it's likely that an assumption made\nabout the GitHub API has been broken. To verify this, run:\n\n```console\n$ pytest -m assumption\n```\n\nSince the external assumptions rely on an internet connection, you ",
        "file": "/Users/akash/Workspace/assignments/code-qa-api/data/grip-no-tests/README.md",
        "start_idx": 22000
    },
    {
        "text": "may want to skip\nthem when developing locally. Tighten the cycle even further by stopping on the\nfirst failure with `-x`:\n\n```console\n$ pytest -xm \"not assumption\"\n```\n\nOr with [pytest-watch][]:\n\n```console\n$ ptw -- -xm \"not assumption\"\n```\n\n\nContributing\n------------\n\n1. Check the open issues or open a new issue to start a discussion around\n   your feature idea or the bug you found\n2. Fork the repository and make your changes\n3. Open a new pull request\n\nIf your PR has been waiting a while, feel",
        "file": "/Users/akash/Workspace/assignments/code-qa-api/data/grip-no-tests/README.md",
        "start_idx": 22500
    },
    {
        "text": " free to [ping me on Twitter][twitter].\n\nUse this software often? <a href=\"https://saythanks.io/to/joeyespo\" target=\"_blank\"><img src=\"https://img.shields.io/badge/Say%20Thanks-!-1EAEDB.svg\" align=\"center\" alt=\"Say Thanks!\"></a>\n:smiley:\n\n\n[pypi]: http://pypi.python.org/pypi/grip/\n[markdown]: http://developer.github.com/v3/markdown\n[rdd]: http://tom.preston-werner.com/2010/08/23/readme-driven-development.html\n[authors.md]: AUTHORS.md\n[offline-renderer]: http://github.com/joeyespo/grip/tree/offli",
        "file": "/Users/akash/Workspace/assignments/code-qa-api/data/grip-no-tests/README.md",
        "start_idx": 23000
    },
    {
        "text": "ne-renderer\n[personal access token]: https://github.com/settings/tokens/new?scopes=\n[keychain-access]: https://gist.github.com/klmr/3840aa3c12f947e4064c\n[task-lists]: https://github.com/blog/1825-task-lists-in-all-markdown-documents\n[user-content]: http://github.github.com/github-flavored-markdown\n[python-markdown]: http://github.com/waylan/Python-Markdown\n[flask.run]: http://flask.pocoo.org/docs/0.10/api/#flask.Flask.run\n[flask.debug]: http://flask.pocoo.org/docs/0.10/api/#flask.Flask.debug\n[py",
        "file": "/Users/akash/Workspace/assignments/code-qa-api/data/grip-no-tests/README.md",
        "start_idx": 23500
    },
    {
        "text": "test]: http://pytest.org/\n[pytest-watch]: https://github.com/joeyespo/pytest-watch\n[twitter]: http://twitter.com/joeyespo\n",
        "file": "/Users/akash/Workspace/assignments/code-qa-api/data/grip-no-tests/README.md",
        "start_idx": 24000
    },
    {
        "text": "\"\"\"\nGrip\n----\n\nRender local readme files before sending off to GitHub.\n\n\nGrip is easy to set up\n``````````````````````\n\n::\n\n    $ pip install grip\n    $ cd myproject\n    $ grip\n\n\nLinks\n`````\n\n* `Website <http://github.com/joeyespo/grip>`_\n\n\"\"\"\n\nimport os\nfrom setuptools import setup, find_packages\n\n\ndef read(filename):\n    with open(os.path.join(os.path.dirname(__file__), filename)) as f:\n        return f.read()\n\n\nsetup(\n    name='grip',\n    version='4.6.2',\n    description='Render local readme ",
        "file": "/Users/akash/Workspace/assignments/code-qa-api/data/grip-no-tests/setup.py",
        "start_idx": 0
    },
    {
        "text": "files before sending off to GitHub.',\n    long_description=__doc__,\n    author='Joe Esposito',\n    author_email='joe@joeyespo.com',\n    url='http://github.com/joeyespo/grip',\n    license='MIT',\n    platforms='any',\n    packages=find_packages(),\n    package_data={'grip': ['static/*.*', 'static/octicons/*', 'templates/*']},\n    install_requires=read('requirements.txt').splitlines(),\n    extras_require={'tests': read('requirements-test.txt').splitlines()},\n    zip_safe=False,\n    entry_points={'con",
        "file": "/Users/akash/Workspace/assignments/code-qa-api/data/grip-no-tests/setup.py",
        "start_idx": 500
    },
    {
        "text": "sole_scripts': ['grip = grip:main']},\n)\n",
        "file": "/Users/akash/Workspace/assignments/code-qa-api/data/grip-no-tests/setup.py",
        "start_idx": 1000
    },
    {
        "text": "Grip Changelog\n--------------\n\n\n#### Version 4.6.2 (2023-10-12)\n\n##### Bugs fixed\n\n- Support Werkzeug 3 by using a default encoding of UTF-8 ([#377](https://github.com/joeyespo/grip/ issues/377) - thanks, [@daniel-eichinger-bl][]!)\n\n\n#### Version 4.6.1 (2022-03-30)\n\n##### Bugs fixed\n\n- Fix \"ImportError: cannot import name 'safe_join' from 'flask'\" when using Flask 2.1.0+ ([#360](https://github.com/joeyespo/grip/pull/360) - thanks, [@bryce-carson][]!)\n\n\n#### Version 4.6.0 (2022-02-01)\n\n##### Nota",
        "file": "/Users/akash/Workspace/assignments/code-qa-api/data/grip-no-tests/CHANGES.md",
        "start_idx": 0
    },
    {
        "text": "ble changes\n\n- Update output and **fix style issues**\n- Add support for **Python 3.7, 3.8, 3.9, 3.10**\n- Improve handling of PDFs and other binary files\n- Fix deprecation warnings from newer dependency versions\n\n##### Deprecations\n\n- End-of-life [Python versions](https://devguide.python.org/#status-of-python-branches) no longer intentionally supported\n  - Python 2.6, 2.7 (Python 2 compatibility will be removed entirely in the next major release)\n  - Python 3.0, 3.1, 3.2, 3.3 ([#275](https://gith",
        "file": "/Users/akash/Workspace/assignments/code-qa-api/data/grip-no-tests/CHANGES.md",
        "start_idx": 500
    },
    {
        "text": "ub.com/joeyespo/grip/pull/275) - thanks, [@svisser][]!), 3.4, 3.5, 3.6\n- Current [dependency versions](requirements.txt) (more recent versions will be required in the next major release)\n\n##### Bugs fixed\n\n- Fix typo in error message ([#266](https://github.com/joeyespo/grip/pull/266) - thanks, [@Godron629][]!)\n- Update HTML/CSS scaffold to match GitHub ([#297](https://github.com/joeyespo/grip/pull/297) - thanks, [@phyllisstein][]!)\n- Fix tests by adding a missing `USER_CONTEXT` argument to one o",
        "file": "/Users/akash/Workspace/assignments/code-qa-api/data/grip-no-tests/CHANGES.md",
        "start_idx": 1000
    },
    {
        "text": "f the `GitHubRenderer` calls\n- Serve non-`text/` MIME types as raw files for better handling of, e.g. PDF files ([#234](https://github.com/joeyespo/grip/pull/234) - thanks, [@wvspee][]!)\n- Fix style parsing, which caused some styles to be missing ([#347](https://github.com/joeyespo/grip/issues/347))\n\n##### Other changes\n\n- Readme: Update to correct `--no-inline` option ([#267](https://github.com/joeyespo/grip/issues/267) - thanks, [@TomDLT][]!)\n- Readme: Fix links to Grip class ([#276](https://g",
        "file": "/Users/akash/Workspace/assignments/code-qa-api/data/grip-no-tests/CHANGES.md",
        "start_idx": 1500
    },
    {
        "text": "ithub.com/joeyespo/grip/issues/276) - thanks, [@jacebrowning][]!)\n- Readme: Clarify that this sends your markdown to GitHub ([#251](https://github.com/joeyespo/grip/issues/251) - thanks, [@courajs][]!)\n- Update `pytest` usages (see [pytest 3.0.0 changelog](https://github.com/pytest-dev/pytest/blob/master/CHANGELOG.rst#300-2016-08-18))\n- Add `.pytest_cache` to `.gitignore` ([#287](https://github.com/joeyespo/grip/pull/287) - thanks, [@svisser][]!)\n- Add `.venv` and `.idea` to `.gitignore` and cle",
        "file": "/Users/akash/Workspace/assignments/code-qa-api/data/grip-no-tests/CHANGES.md",
        "start_idx": 2000
    },
    {
        "text": "an up\n- Add `flake8` test dependency and fix linting errors ([#299](https://github.com/joeyespo/grip/pull/299))\n- Add `pytest` test dependency ([#294](https://github.com/joeyespo/grip/pull/294) - thanks, [@Methacrylon][]!)\n- License: Distribute LICENSE file ([#274](https://github.com/joeyespo/grip/pull/274) - thanks, [@synapticarbors][]!)\n- License: Update year\n\n\n###### Version 4.5.2 (2018-03-18)\n\n- Enhancement: Show more helpful error message on TLSV1_ALERT_PROTOCOL_VERSION to help people throu",
        "file": "/Users/akash/Workspace/assignments/code-qa-api/data/grip-no-tests/CHANGES.md",
        "start_idx": 2500
    },
    {
        "text": "gh ([#262](https://github.com/joeyespo/grip/pull/262))\n- Docs: Use smaller header for patch version titles in CHANGES.md\n\n\n###### Version 4.5.1 (2018-03-18)\n\n- Bugfix: Don't print \"Downloading\" from `--export` when using `--quiet`\n- Cleanup: Move `quiet` kwarg of `export()` to the end like the other API methods\n- Readme: Document `quiet` kwarg of `export()`\n- Readme: Document `quiet` kwarg of `render_page()`\n\n\n#### Version 4.5.0 (2018-03-18)\n\n- Enhancement: Show warning if no styles are collecte",
        "file": "/Users/akash/Workspace/assignments/code-qa-api/data/grip-no-tests/CHANGES.md",
        "start_idx": 3000
    },
    {
        "text": "d ([#265](https://github.com/joeyespo/grip/pull/265))\n- Bugfix: Don't print \"Exporting\" from `--export` when using `--quiet` ([#247](https://github.com/joeyespo/grip/pull/247) - thanks, [@kagof][]!)\n- Bugfix: Fix style parsing ([#265](https://github.com/joeyespo/grip/pull/265))\n- Bugfix: Loosen up the style URLs matching ([#265](https://github.com/joeyespo/grip/pull/265))\n- Internals: Fix `_strip_url_params` method name typo ([#254](https://github.com/joeyespo/grip/pull/254) - thanks, [@jwilk][]",
        "file": "/Users/akash/Workspace/assignments/code-qa-api/data/grip-no-tests/CHANGES.md",
        "start_idx": 3500
    },
    {
        "text": "!)\n- Readme: Fix syntax highlighting in README ([#264](https://github.com/joeyespo/grip/pull/264) - thanks, [@jwilk][]!)\n- Readme: Remove Gratipay :frowning_face: ([Article](https://gratipay.news/the-end-cbfba8f50981))\n- Readme: Tweak Contributing copy\n- Tests: Wrap map() with list() for multiple iteration for Python 3 support\n- Tests: Call `Popen.communicate()` only once\n- Tests: Regenerate render output\n- Cleanup: PEP8\n- Thanks: [@jwilk][] for getting the GitHub repo to finally show the right ",
        "file": "/Users/akash/Workspace/assignments/code-qa-api/data/grip-no-tests/CHANGES.md",
        "start_idx": 4000
    },
    {
        "text": "Language stats :smiley: ([#263](https://github.com/joeyespo/grip/pull/263))\n\n\n#### Version 4.4.0 (2017-09-24)\n\n- Patch: Work around a GitHub API header bug ([#245](https://github.com/joeyespo/grip/pull/245))\n- Bugfix: Fail cleanly when server address is already in use ([#216](https://github.com/joeyespo/grip/pull/216) - thanks, [@davisjam][]!)\n- Bugfix: Fix `--browser` when running on a random port (port 0) ([#219](https://github.com/joeyespo/grip/pull/219))\n- Bugfix: Add defaults to USERNAME an",
        "file": "/Users/akash/Workspace/assignments/code-qa-api/data/grip-no-tests/CHANGES.md",
        "start_idx": 4500
    },
    {
        "text": "d PASSWORD in case just one is provided ([#222](https://github.com/joeyespo/grip/pull/222))\n- Internals: Fix deprecation warning in Python 3.6 by using triple-quoted raw strings in regexp constants ([#223](https://github.com/joeyespo/grip/pull/223) - thanks, [@jwilk][]!)\n- Internals: Decouple patchers from renderers\n- Docs: Fix typo in API docs ([#224](https://github.com/joeyespo/grip/pull/224) - thanks, [@jwilk][]!)\n- Readme: Add Homebrew installation instructions ([#201](https://github.com/joe",
        "file": "/Users/akash/Workspace/assignments/code-qa-api/data/grip-no-tests/CHANGES.md",
        "start_idx": 5000
    },
    {
        "text": "yespo/grip/issues/201) - thanks, [@zmwangx][]!)\n- Readme: Use `pwd` instead of `PWD` in bash shell example ([#207](https://github.com/joeyespo/grip/pull/207) - thanks, [@xxd3vin][]!)\n- Readme: Use 'index.html' in --export example for searchability\n- Readme: Fix link to `offline-renderer` branch ([#230](https://github.com/joeyespo/grip/pull/230) - thanks, [@4ndrej][]!)\n- Readme: Add Configuration troubleshooting tip and example\n- Readme: Add [Say Thanks](http://saythanks.io/) badge :smiley:\n- Tha",
        "file": "/Users/akash/Workspace/assignments/code-qa-api/data/grip-no-tests/CHANGES.md",
        "start_idx": 5500
    },
    {
        "text": "nks: [@JasonThomasData][] for investigating and working with GitHub Support to fix a heading bug ([#235](https://github.com/joeyespo/grip/pull/235))\n\n\n#### Version 4.3.2 (2016-07-21)\n\n- Bugfix: Fix `setup.py install` ([#199](https://github.com/joeyespo/grip/issues/199))\n\n\n###### Version 4.3.1 (2016-07-21)\n\n- Bugfix: Allow port 0 ([#197](https://github.com/joeyespo/grip/pull/197))\n- Bugfix: Fix setup.py build and include octicon files in the build asset ([#198](https://github.com/joeyespo/grip/is",
        "file": "/Users/akash/Workspace/assignments/code-qa-api/data/grip-no-tests/CHANGES.md",
        "start_idx": 6000
    },
    {
        "text": "sues/198))\n\n\n#### Version 4.3.0 (2016-07-19)\n\n- Bugfix: Fix `--export` deadlock ([#184](https://github.com/joeyespo/grip/issues/184))\n- Bugfix: Make `--quiet` truly quiet ([#188](https://github.com/joeyespo/grip/pull/188) - thanks, [@kba][]!)\n- Bugfix: Allow `--clear` to work without a README file present ([#189](https://github.com/joeyespo/grip/issues/189))\n- Bugfix: Fix tests by patching sys.exc_clear to have Flask 0.11 work on pypy3 ([#190](https://github.com/joeyespo/grip/issues/190))\n- Bugf",
        "file": "/Users/akash/Workspace/assignments/code-qa-api/data/grip-no-tests/CHANGES.md",
        "start_idx": 6500
    },
    {
        "text": "ix: Fix minor version check during patch_svg ([#191](https://github.com/joeyespo/grip/issues/191))\n- Bugfix: Add Octicon font until the Readme API inlines SVGs ([#192](https://github.com/joeyespo/grip/issues/192))\n- Bugfix: Show '- Grip' in `<title>` only, not in page header ([#193](https://github.com/joeyespo/grip/issues/193))\n- Readme: Remove duplicated words ([#177](https://github.com/joeyespo/grip/pull/177) - thanks, [@jwilk][]!)\n- Readme: Remove download count badge since it's broken ([#194",
        "file": "/Users/akash/Workspace/assignments/code-qa-api/data/grip-no-tests/CHANGES.md",
        "start_idx": 7000
    },
    {
        "text": "](https://github.com/joeyespo/grip/pull/194))\n\n\n#### Version 4.2.0 (2016-04-12)\n\n- Enhancement: Expose `render_inline` through `--no-inline` CLI option ([#165](https://github.com/joeyespo/grip/pull/165) - thanks, [@mrexmelle][]!)\n- Bugfix: Update Readme width to match latest GitHub changes ([#167](https://github.com/joeyespo/grip/pull/167) - thanks, [@motevets][]!)\n- Bugfix: Update Octicons to match latest GitHub changes ([#167](https://github.com/joeyespo/grip/pull/167) - thanks, [@motevets][]!",
        "file": "/Users/akash/Workspace/assignments/code-qa-api/data/grip-no-tests/CHANGES.md",
        "start_idx": 7500
    },
    {
        "text": ")\n- Bugfix: Enable SVG support for Python 2.6 and below ([#157](https://github.com/joeyespo/grip/issues/157))\n- Readme: Fix Mac OS name ([#162](https://github.com/joeyespo/grip/pull/162) - thanks, [@ErikMHummel][]!)\n- Readme: Add tip for generating docs from Readme files ([#168](https://github.com/joeyespo/grip/pull/168) - thanks, [@mrexmelle][]!)\n- License: Update year\n\n\n#### Version 4.1.0 (2015-12-11)\n\n- Enhancement: Prompt for password when `--user` is provided without a `--pass` ([#154](http",
        "file": "/Users/akash/Workspace/assignments/code-qa-api/data/grip-no-tests/CHANGES.md",
        "start_idx": 8000
    },
    {
        "text": "s://github.com/joeyespo/grip/pull/154) - thanks, [@mekoda][]!)\n- Bugfix: Default to UTF-8 when reading from stdin and there's no encoding ([#152](https://github.com/joeyespo/grip/issues/152))\n- Readme: Document `-b`\n- Readme: Add [link to Grip Release Letter](http://joeyespo.us2.list-manage.com/subscribe?u=255dd49194fa8078258d9a735&id=d76534e979&group[14285][1]=true) for getting notified about future releases\n- Readme: Remove Known Issues section since they are now working\n\n\n### Version 4.0.0 (2",
        "file": "/Users/akash/Workspace/assignments/code-qa-api/data/grip-no-tests/CHANGES.md",
        "start_idx": 8500
    },
    {
        "text": "015-11-18)\n\n##### Notable changes\n\n- Content is now refreshed when the file changes ([#135](https://github.com/joeyespo/grip/pull/135) - thanks, [@markbt][]!)\n- Rename `--gfm` to `--user-content` to reduce confusion ([#139](https://github.com/joeyespo/grip/pull/139))\n- Fix general Readme [Task Lists](https://github.com/blog/1825-task-lists-in-all-markdown-documents) ([#149](https://github.com/joeyespo/grip/issues/149))\n- Rearchitect the internals\n- Add tests\n\n##### Breaking changes (API)\n\n- Reor",
        "file": "/Users/akash/Workspace/assignments/code-qa-api/data/grip-no-tests/CHANGES.md",
        "start_idx": 9000
    },
    {
        "text": "der API function arguments for consistency\n- Remove `STATIC_URL_PATH` from settings (use `Grip` constructor or the ENV variable instead)\n- Remove `STYLE_URLS_SOURCE` and `STYLE_ASSET_` settings (they're now constants)\n- Remove `CACHE_URL` setting (the cache URL is now `{}/cache.format(GRIPURL)`)\n- Remove `github_renderer.render_content` (use `GitHubRenderer` instead)\n- Remove `offline_renderer.render_content` (use `OfflineRenderer` instead)\n- Remove `read_binary` and `read_text` functions (use `",
        "file": "/Users/akash/Workspace/assignments/code-qa-api/data/grip-no-tests/CHANGES.md",
        "start_idx": 9500
    },
    {
        "text": "io.open` directly)\n- Remove `resolve_readme` (use `DirectoryReader(path, force).filename_for(None)` instead)\n- Remove `text.read` call in `TextReader.read(text)`\n- Route Grip assets through `/__/grip` by default instead of `/`\n- Raise `ReadmeNotFoundError` when a Readme is not found instead of `ValueError`\n- Require a Unicode string when rendering Markdown\n- Set `DEBUG` to `False` by default in settings\n- Use UPPERCASE for constants\n\n##### Assumptions fixed\n\n- Update URL of GitHub assets\n\n##### ",
        "file": "/Users/akash/Workspace/assignments/code-qa-api/data/grip-no-tests/CHANGES.md",
        "start_idx": 10000
    },
    {
        "text": "Bugs fixed\n\n- Stop `--browser` from consuming all the sockets ([#136](https://github.com/joeyespo/grip/pull/136) - thanks, [@markbt][]!)\n- Fix `--browser` to stop waiting when the server is terminated before it listens\n- Fix `--browser` when listening on `0.0.0.0`\n- Fix Python 2.6\n- Fix Python 3.x with `python -m grip`\n- Allow caching of assets that include query parameters\n- Take the `route` argument into account in `Grip.render` (this was broken in the old `render_app`)\n- Fix rendering Readme ",
        "file": "/Users/akash/Workspace/assignments/code-qa-api/data/grip-no-tests/CHANGES.md",
        "start_idx": 10500
    },
    {
        "text": "containing Unicode by manually decoding UTF-8 from the GitHub response\n\n##### Other changes\n\n- Add `Home.md` as a supported default file title for GitHub Wikis\n- Add `AlreadyRunningError` for calling `Grip.run` while the server is already running\n- Add `ReadmeNotFoundError` for cross-Python-version file-not-found errors\n- Add `Grip`, a subclass of `Flask`\n- Add `ReadmeAssetManager` and `GitHubAssetManager`\n- Add `ReadmeReader`, `DirectoryReader`, `StdinReader`, and `TextReader`\n- Add `ReadmeRend",
        "file": "/Users/akash/Workspace/assignments/code-qa-api/data/grip-no-tests/CHANGES.md",
        "start_idx": 11000
    },
    {
        "text": "erer`, `GitHubRenderer`, and `OfflineRenderer`\n- Add `grip.command.version` for printing version information (similar to `grip.command.usage`)\n- Print version with `-V`\n- Make `port` and `cancel_event` optional arguments in `wait_and_start_browser`\n- Add `start_browser_when_ready` to wait and start the browser in a background thread\n- Add the `--quiet` CLI option\n- The `GRIPHOME` ENV variable now expands the user directory (`~`), e.g. `~/.config/grip`\n- Add `DEFAULT_API_URL` constant as a fallba",
        "file": "/Users/akash/Workspace/assignments/code-qa-api/data/grip-no-tests/CHANGES.md",
        "start_idx": 11500
    },
    {
        "text": "ck for when `api_url` is not specified in `render_content` or `GitHubRenderer`\n- Add `grip_url` and its fallback constant `DEFAULT_GRIPURL` for specifying a route to serve Grip assets from\n- Remove implicit dependencies in `requirements.txt`\n- Readme: Add [Tips section](https://github.com/joeyespo/grip#tips)\n\n\n#### Version 3.3.0 (2015-06-28)\n\n- Enhancement: Add `GRIPHOME` environment variable for alternative `settings.py` locations ([#117](https://github.com/joeyespo/grip/pull/117) - thanks, [@z",
        "file": "/Users/akash/Workspace/assignments/code-qa-api/data/grip-no-tests/CHANGES.md",
        "start_idx": 12000
    },
    {
        "text": "mwangx][]!)\n- Enhancement: Allow alternative github API URL ([#119](https://github.com/joeyespo/grip/pull/119) - thanks, [@dandavison][]!)\n- Enhancement: Change the default port to `6419` to avoid conflicts ([#124](https://github.com/joeyespo/grip/pull/124))\n- Enhancement: Automatically open grip in a new tab in browser ([122](https://github.com/joeyespo/grip/pull/122) - thanks, [@ssundarraj][]!)\n- Enhancement: Only cache styles and assets if all downloads are successful\n- Enhancement: Add `--ti",
        "file": "/Users/akash/Workspace/assignments/code-qa-api/data/grip-no-tests/CHANGES.md",
        "start_idx": 12500
    },
    {
        "text": "tle` option to manually set the title on the rendered page ([#125](https://github.com/joeyespo/grip/pull/125) - thanks, [@jlhonora][]!)\n- Enhancement: Render tables and lists in `render_offline` mode ([#133](https://github.com/joeyespo/grip/pull/133) - thanks, [@akawhy][]!)\n- Bugfix: Don't print info messages to `STDOUT` for when exporting to `STDOUT` ([#101](https://github.com/joeyespo/grip/issues/101))\n- Bugfix: Don't swallow system exceptions\n- Bugfix: Use list builder notation instead of `ma",
        "file": "/Users/akash/Workspace/assignments/code-qa-api/data/grip-no-tests/CHANGES.md",
        "start_idx": 13000
    },
    {
        "text": "p` to get `default_filenames` to evaluate it to non-empty on Python 3\n- Bugfix: Fix asset retrieval on both Python 2 and 3\n- Bugfix: Fix `InsecureRequestWarning` problems ([#111](https://github.com/joeyespo/grip/issues/111), [#128](https://github.com/joeyespo/grip/issues/128))\n- Bugfix: Fix missing Octicons by properly downloading assets as binary files ([#127](https://github.com/joeyespo/grip/issues/127))\n- Bugfix: Add trailing slashes to directories and remove them for files so relative links ",
        "file": "/Users/akash/Workspace/assignments/code-qa-api/data/grip-no-tests/CHANGES.md",
        "start_idx": 13500
    },
    {
        "text": "are correct ([#131](https://github.com/joeyespo/grip/issues/131))\n- CLI: Add \"Omit this to render as a normal GitHub README file.\" to help avoid confusion of `--gfm`\n- Readme: Add note about `^D` and `^Z` on Windows ([#105](https://github.com/joeyespo/grip/issues/105))\n- Cleanup: PEP8\n\n\n#### Version 3.2.0 (2015-02-24)\n\n- Bugfix: Encode to UTF-8 before sending text off to GitHub to support non-`latin-1` characters ([#99](https://github.com/joeyespo/grip/issues/99))\n\n\n#### Version 3.1.0 (2015-02-0",
        "file": "/Users/akash/Workspace/assignments/code-qa-api/data/grip-no-tests/CHANGES.md",
        "start_idx": 14000
    },
    {
        "text": "8)\n\n- Bugfix: Support non-ascii languages ([#86](https://github.com/joeyespo/grip/issues/86))\n- Bugfix: Fix links to header anchors ([#94](https://github.com/joeyespo/grip/issues/94))\n- Bugfix: Unpin dependencies so there's no conflict with other globally-installed packages\n- Bugfix: Fix missing octicons ([#95](https://github.com/joeyespo/grip/pull/95) - thanks, [@madflow][]!)\n- Bugfix: Fix \"Could not retrieve styles\" error on Windows ([#90](https://github.com/joeyespo/grip/pull/90) - thanks, [@",
        "file": "/Users/akash/Workspace/assignments/code-qa-api/data/grip-no-tests/CHANGES.md",
        "start_idx": 14500
    },
    {
        "text": "alexandre-mbm][]!)\n- Cleanup\n\n\n### Version 3.0.0 (2014-08-08)\n\n- Enhancement: Add `{version}` format argument to `CACHE_DIRECTORY` so upgrades can start fresh and also drive cache clearing\n- Enhancement: Allow exporting to stdout ([#73](https://github.com/joeyespo/grip/issues/73))\n- Enhancement: Allow reading from stdin ([#72](https://github.com/joeyespo/grip/issues/72))\n- Enhancement: Allow `:<port>` pattern in CLI\n- Enhancement: Add a favicon ![favicon](artwork/favicon.ico) ([#60](https://gith",
        "file": "/Users/akash/Workspace/assignments/code-qa-api/data/grip-no-tests/CHANGES.md",
        "start_idx": 15000
    },
    {
        "text": "ub.com/joeyespo/grip/issues/60))\n- Enhancement: Add \"GitHub rate limit\" page to replace the generic 403 error ([#48](https://github.com/joeyespo/grip/issues/48))\n- Enhancement: Add option to clear the cache ([#68](https://github.com/joeyespo/grip/issues/68))\n- Enhancement: Allow storing credentials in config file ([#61](https://github.com/joeyespo/grip/issues/61))\n- Enhancement: Read user settings from `~/.grip`\n- Enhancement: Add `__main__.py` for allowing grip to be run as a module with `pytho",
        "file": "/Users/akash/Workspace/assignments/code-qa-api/data/grip-no-tests/CHANGES.md",
        "start_idx": 15500
    },
    {
        "text": "n -m grip`\n- Enhancement: Add `--wide` option to render as the old GitHub size (to opt out of [#47](https://github.com/joeyespo/grip/issues/47))\n- Enhancement: Add title to rendered page to look more like GitHub\n- Bugfix: Allow using [personal auth tokens](https://github.com/settings/tokens/new?scopes=) without a username\n- Bugfix: Show images from their canonical source instead of using GitHub's cache ([#50](https://github.com/joeyespo/grip/issues/50))\n- Bugfix: Inline assets into the exported ",
        "file": "/Users/akash/Workspace/assignments/code-qa-api/data/grip-no-tests/CHANGES.md",
        "start_idx": 16000
    },
    {
        "text": "file ([#69](https://github.com/joeyespo/grip/issues/69))\n- Bugfix: Cache the assets of the styles, ([#56](https://github.com/joeyespo/grip/issues/56))\n- Bugfix: Allow cross-platform newlines in config ([#67](https://github.com/joeyespo/grip/pull/67))\n- Bugfix: Fix running from another directory ([#36](https://github.com/joeyespo/grip/issues/36))\n- Bugfix: Move `instance_path` to `~/.grip` to cache to a non-privileged directory ([#39](https://github.com/joeyespo/grip/pull/39) - thanks, [@swsnider",
        "file": "/Users/akash/Workspace/assignments/code-qa-api/data/grip-no-tests/CHANGES.md",
        "start_idx": 16500
    },
    {
        "text": "][]!)\n- Bugfix: Change the default width to match GitHub's new README style ([#47](https://github.com/joeyespo/grip/issues/47))\n- Readme: Mention personal access tokens and link to the appropriate GitHub page ([#74](https://github.com/joeyespo/grip/pull/74) - thanks, [@davejamesmiller][]!)\n- Readme: Add badges, more usage example, and support and contact information\n- Readme: Specify that HTTPS is always used to access the GitHub API\n- Readme: Document credentials and rate limit ([#46](https://g",
        "file": "/Users/akash/Workspace/assignments/code-qa-api/data/grip-no-tests/CHANGES.md",
        "start_idx": 17000
    },
    {
        "text": "ithub.com/joeyespo/grip/issues/46))\n- Readme: Document configuration options\n- Readme: Clarify command line arguments and `--gfm`\n- Readme: Add Known Issues section\n- Infrastructure and code cleanup\n\n\n###### Version 2.0.1 (2014-06-14)\n\n- Enhancement: Add ability to export to a specific file using the CLI ([#33](https://github.com/joeyespo/grip/issues/33))\n- Enhancement: Python 3 compatibility ([#54](https://github.com/joeyespo/grip/pull/54) - thanks, [@fly][]!)\n- Bugfix: Fix issue styles weren't",
        "file": "/Users/akash/Workspace/assignments/code-qa-api/data/grip-no-tests/CHANGES.md",
        "start_idx": 17500
    },
    {
        "text": " being downloaded properly (thanks, [@fly][]!)\n- Bugfix: Support anchoring to section headers like GitHub ([#58](https://github.com/joeyespo/grip/issues/58))\n- Readme: Document rate limits and --user / --pass\n- Readme: Refer to the \"offline rendering\" work\n- Readme: Fix 'GitHub' spelling\n- Extract and expose constants\n- Update requirements\n\n\n### Version 2.0.0 (2013-09-26)\n\n- Feature: Styles are now cached (from the not-yet-released offline rendering) (thanks, [@isbadawi][]!)\n- Feature: Add user/",
        "file": "/Users/akash/Workspace/assignments/code-qa-api/data/grip-no-tests/CHANGES.md",
        "start_idx": 18000
    },
    {
        "text": "pass options for GitHub auth (thanks, [@joelittlejohn][]!)\n- Feature: Add export to single HTML file (thanks, [@iliggio][]!)\n- Enhancement: Better HTML titles by normalizing the path, always providing a title\n- Enhancement: Allow styles to be overridden, with examples in static directory\n- Enhancement: Relay GitHub API HTTP errors to browser for debuggability\n- Enhancement: Extract render_app and add create_app in API\n- Bugfix: Fix manual installs using setup.py (thanks, [@briancappello][]!)\n- B",
        "file": "/Users/akash/Workspace/assignments/code-qa-api/data/grip-no-tests/CHANGES.md",
        "start_idx": 18500
    },
    {
        "text": "ugfix: Fix rendering local images (thanks, [@jgallagher][]!)\n- Bugfix: Handle File Not Found errors as 404 when given a directory\n- Rename and re-arrange the configuration files\n- Update README.md with new features\n- Update AUTHORS.md format\n- Upgrade requirements\n- Simplify code\n\n\n#### Version 1.2.0 (2013-03-17)\n\n- Add AUTHORS.md for attributing credit\n- Feature: Can now click hyperlinks to render other files without re-running (thanks, [@vladwing][]!)\n- Update GitHub CSS regular expression\n\n\n#",
        "file": "/Users/akash/Workspace/assignments/code-qa-api/data/grip-no-tests/CHANGES.md",
        "start_idx": 19000
    },
    {
        "text": "##### Version 1.1.1 (2013-01-05)\n\n- Upgrade path-and-address\n- Use exact versions in requirements\n\n\n#### Version 1.1 (2013-01-04)\n\n- Readme: Clarify and add examples\n- Bugfix: Typo in requirements\n- Clean up setup.py\n\n\n### Version 1.0 (2012-12-08)\n\n- CLI: now accepts an address, not just a port\n- CLI: now accepts --gfm and --context=<repo> arguments for rendering GitHub Flavored Markdown\n- API: `serve` function now accepts `None` for its arguments to indicate 'use default'\n- API: `serve` functio",
        "file": "/Users/akash/Workspace/assignments/code-qa-api/data/grip-no-tests/CHANGES.md",
        "start_idx": 19500
    },
    {
        "text": "n now accepts a 'host'\n- API: `serve` now resolves the default file when given a path\n- Now using docopt for more advanced argument processing\n- Now using path-and-address for humanistic path / address handling\n\n\n#### Version 0.2.1 (2012-12-02)\n\n- Issue #5: Fixed the installer to work in the case where the requirements are not already installed\n\n\n#### Version 0.2 (2012-12-01)\n\n- GitHub styles are now retrieved dynamically when run, instead of using the outdated styles from the config\n\n\n#### Vers",
        "file": "/Users/akash/Workspace/assignments/code-qa-api/data/grip-no-tests/CHANGES.md",
        "start_idx": 20000
    },
    {
        "text": "ion 0.1.1 (2012-11-20)\n\n- Added the port command-line argument\n\n\n#### Version 0.1 (2012-11-19)\n\n- First public preview release\n\n\n[@vladwing]: https://github.com/vladwing\n[@isbadawi]: https://github.com/isbadawi\n[@joelittlejohn]: https://github.com/joelittlejohn\n[@briancappello]: https://github.com/briancappello\n[@jgallagher]: https://github.com/jgallagher\n[@iliggio]: https://github.com/iliggio\n[@fly]: https://github.com/fly\n[@swsnider]: https://github.com/swsnider\n[@davejamesmiller]: https://git",
        "file": "/Users/akash/Workspace/assignments/code-qa-api/data/grip-no-tests/CHANGES.md",
        "start_idx": 20500
    },
    {
        "text": "hub.com/davejamesmiller\n[@alexandre-mbm]: https://github.com/alexandre-mbm\n[@madflow]: https://github.com/madflow\n[@zmwangx]: https://github.com/zmwangx\n[@dandavison]: https://github.com/dandavison\n[@ssundarraj]: https://github.com/ssundarraj\n[@jlhonora]: https://github.com/jlhonora\n[@akawhy]: https://github.com/akawhy\n[@markbt]: https://github.com/markbt\n[@mekoda]: https://github.com/mekoda\n[@ErikMHummel]: https://github.com/ErikMHummel\n[@mrexmelle]: https://github.com/mrexmelle\n[@motevets]: ht",
        "file": "/Users/akash/Workspace/assignments/code-qa-api/data/grip-no-tests/CHANGES.md",
        "start_idx": 21000
    },
    {
        "text": "tps://github.com/motevets\n[@kba]: https://github.com/kba\n[@jwilk]: https://github.com/jwilk\n[@xxd3vin]: https://github.com/xxd3vin\n[@davisjam]: https://github.com/davisjam\n[@JasonThomasData]: https://github.com/JasonThomasData\n[@4ndrej]: https://github.com/4ndrej\n[@erikrtn]: https://github.com/erikrtn\n[@kagof]: https://github.com/kagof\n[@Godron629]: https://github.com/Godron629\n[@TomDLT]: https://github.com/TomDLT\n[@synapticarbors]: https://github.com/synapticarbors\n[@svisser]: https://github.co",
        "file": "/Users/akash/Workspace/assignments/code-qa-api/data/grip-no-tests/CHANGES.md",
        "start_idx": 21500
    },
    {
        "text": "m/svisser\n[@jacebrowning]: https://github.com/jacebrowning\n[@phyllisstein]: https://github.com/phyllisstein\n[@courajs]: https://github.com/courajs\n[@wvspee]: https://github.com/wvspee\n[@Methacrylon]: https://github.com/Methacrylon\n[@bryce-carson]: https://github.com/bryce-carson\n[@daniel-eichinger-bl]: https://github.com/daniel-eichinger-bl\n",
        "file": "/Users/akash/Workspace/assignments/code-qa-api/data/grip-no-tests/CHANGES.md",
        "start_idx": 22000
    },
    {
        "text": "dist: xenial\nlanguage: python\npython:\n  - 3.7\n  - 3.8\n  - 3.9\n  - 3.10\n  - pypy3\ninstall:\n  - pip install -e .[tests]\nscript:\n  - flake8\n  - pytest -m \"not assumption\"\n",
        "file": "/Users/akash/Workspace/assignments/code-qa-api/data/grip-no-tests/.travis.yml",
        "start_idx": 0
    },
    {
        "text": "from __future__ import print_function, unicode_literals\n\nimport errno\nimport io\nimport mimetypes\nimport os\nimport posixpath\nimport sys\nfrom abc import ABCMeta, abstractmethod\n\nfrom ._compat import safe_join\n\nfrom .constants import DEFAULT_FILENAMES, DEFAULT_FILENAME\nfrom .exceptions import ReadmeNotFoundError\nfrom .vendor.six import add_metaclass\n\n\n@add_metaclass(ABCMeta)\nclass ReadmeReader(object):\n    \"\"\"\n    Reads Readme content from a URL subpath.\n    \"\"\"\n    def __init__(self):\n        supe",
        "file": "/Users/akash/Workspace/assignments/code-qa-api/data/grip-no-tests/grip/readers.py",
        "start_idx": 0
    },
    {
        "text": "r(ReadmeReader, self).__init__()\n\n    def normalize_subpath(self, subpath):\n        \"\"\"\n        Returns the normalized subpath.\n\n        This allows Readme files to be inferred from directories while\n        still allowing relative paths to work properly.\n\n        Override to change the default behavior of returning the\n        specified subpath as-is.\n        \"\"\"\n        if subpath is None:\n            return None\n\n        return posixpath.normpath(subpath)\n\n    def filename_for(self, subpath):",
        "file": "/Users/akash/Workspace/assignments/code-qa-api/data/grip-no-tests/grip/readers.py",
        "start_idx": 500
    },
    {
        "text": "\n        \"\"\"\n        Returns the relative filename for the specified subpath, or None\n        if the file does not exist.\n        \"\"\"\n        return None\n\n    def mimetype_for(self, subpath=None):\n        \"\"\"\n        Gets the mimetype for the specified subpath.\n        \"\"\"\n        if subpath is None:\n            subpath = DEFAULT_FILENAME\n        mimetype, _ = mimetypes.guess_type(subpath)\n        return mimetype\n\n    def is_binary(self, subpath=None):\n        \"\"\"\n        Gets whether the specif",
        "file": "/Users/akash/Workspace/assignments/code-qa-api/data/grip-no-tests/grip/readers.py",
        "start_idx": 1000
    },
    {
        "text": "ied subpath is a supported binary file.\n        \"\"\"\n        return False\n\n    def last_updated(self, subpath=None):\n        \"\"\"\n        Returns the time of the last modification of the Readme or\n        specified subpath. None is returned if the reader doesn't\n        support modification tracking.\n\n        The format of return value is dependent on the implementing\n        reader. It can be any object as long as equality indicates\n        that the content was not updated.\n        \"\"\"\n        re",
        "file": "/Users/akash/Workspace/assignments/code-qa-api/data/grip-no-tests/grip/readers.py",
        "start_idx": 1500
    },
    {
        "text": "turn None\n\n    @abstractmethod\n    def read(self, subpath=None):\n        \"\"\"\n        Returns the UTF-8 content of the specified subpath, or None if\n        subpath does not exist.\n        \"\"\"\n        pass\n\n\nclass DirectoryReader(ReadmeReader):\n    \"\"\"\n    Reads Readme files from URL subpaths.\n    \"\"\"\n    def __init__(self, path=None, silent=False):\n        super(DirectoryReader, self).__init__()\n        root_filename = os.path.abspath(self._resolve_readme(path, silent))\n        self.root_filenam",
        "file": "/Users/akash/Workspace/assignments/code-qa-api/data/grip-no-tests/grip/readers.py",
        "start_idx": 2000
    },
    {
        "text": "e = root_filename\n        self.root_directory = os.path.dirname(root_filename)\n\n    def _find_file(self, path, silent=False):\n        \"\"\"\n        Gets the full path and extension, or None if a README file could not\n        be found at the specified path.\n        \"\"\"\n        for filename in DEFAULT_FILENAMES:\n            full_path = os.path.join(path, filename) if path else filename\n            if os.path.exists(full_path):\n                return full_path\n\n        # Return default filename if si",
        "file": "/Users/akash/Workspace/assignments/code-qa-api/data/grip-no-tests/grip/readers.py",
        "start_idx": 2500
    },
    {
        "text": "lent\n        if silent:\n            return os.path.join(path, DEFAULT_FILENAME)\n\n        raise ReadmeNotFoundError(path)\n\n    def _resolve_readme(self, path=None, silent=False):\n        \"\"\"\n        Returns the path if it's a file; otherwise, looks for a compatible\n        README file in the directory specified by path.\n\n        If path is None, the current working directory is used.\n\n        If silent is set, the default relative filename will be returned\n        if path is a directory or None i",
        "file": "/Users/akash/Workspace/assignments/code-qa-api/data/grip-no-tests/grip/readers.py",
        "start_idx": 3000
    },
    {
        "text": "f it does not exist.\n\n        Raises ReadmeNotFoundError if no compatible README file can be\n        found and silent is False.\n        \"\"\"\n        # Default to current working directory\n        if path is None:\n            path = '.'\n\n        # Normalize the path\n        path = os.path.normpath(path)\n\n        # Resolve README file if path is a directory\n        if os.path.isdir(path):\n            return self._find_file(path, silent)\n\n        # Return path if file exists or if silent\n        if ",
        "file": "/Users/akash/Workspace/assignments/code-qa-api/data/grip-no-tests/grip/readers.py",
        "start_idx": 3500
    },
    {
        "text": "silent or os.path.exists(path):\n            return path\n\n        raise ReadmeNotFoundError(path, 'File not found: ' + path)\n\n    def _read_text(self, filename):\n        \"\"\"\n        Helper that reads the UTF-8 content of the specified file, or\n        None if the file doesn't exist. This returns a unicode string.\n        \"\"\"\n        with io.open(filename, 'rt', encoding='utf-8') as f:\n            return f.read()\n\n    def _read_binary(self, filename):\n        \"\"\"\n        Helper that reads the bina",
        "file": "/Users/akash/Workspace/assignments/code-qa-api/data/grip-no-tests/grip/readers.py",
        "start_idx": 4000
    },
    {
        "text": "ry content of the specified file, or\n        None if the file doesn't exist. This returns a byte string.\n        \"\"\"\n        with io.open(filename, 'rb') as f:\n            return f.read()\n\n    def normalize_subpath(self, subpath):\n        \"\"\"\n        Normalizes the specified subpath, or None if subpath is None.\n\n        This allows Readme files to be inferred from directories while\n        still allowing relative paths to work properly.\n\n        Raises werkzeug.exceptions.NotFound if the resulti",
        "file": "/Users/akash/Workspace/assignments/code-qa-api/data/grip-no-tests/grip/readers.py",
        "start_idx": 4500
    },
    {
        "text": "ng path\n        would fall out of the root directory.\n        \"\"\"\n        if subpath is None:\n            return None\n\n        # Normalize the subpath\n        subpath = posixpath.normpath(subpath)\n\n        # Add or remove trailing slash to properly support relative links\n        filename = os.path.normpath(safe_join(self.root_directory, subpath))\n        if os.path.isdir(filename):\n            subpath += '/'\n\n        return subpath\n\n    def readme_for(self, subpath):\n        \"\"\"\n        Returns ",
        "file": "/Users/akash/Workspace/assignments/code-qa-api/data/grip-no-tests/grip/readers.py",
        "start_idx": 5000
    },
    {
        "text": "the full path for the README file for the specified\n        subpath, or the root filename if subpath is None.\n\n        Raises ReadmeNotFoundError if a README for the specified subpath\n        does not exist.\n\n        Raises werkzeug.exceptions.NotFound if the resulting path\n        would fall out of the root directory.\n        \"\"\"\n        if subpath is None:\n            return self.root_filename\n\n        # Join for safety and to convert subpath to normalized OS-specific path\n        filename = o",
        "file": "/Users/akash/Workspace/assignments/code-qa-api/data/grip-no-tests/grip/readers.py",
        "start_idx": 5500
    },
    {
        "text": "s.path.normpath(safe_join(self.root_directory, subpath))\n\n        # Check for existence\n        if not os.path.exists(filename):\n            raise ReadmeNotFoundError(filename)\n\n        # Resolve README file if path is a directory\n        if os.path.isdir(filename):\n            return self._find_file(filename)\n\n        return filename\n\n    def filename_for(self, subpath):\n        \"\"\"\n        Returns the relative filename for the specified subpath, or the\n        root filename if subpath is None.",
        "file": "/Users/akash/Workspace/assignments/code-qa-api/data/grip-no-tests/grip/readers.py",
        "start_idx": 6000
    },
    {
        "text": "\n\n        Raises werkzeug.exceptions.NotFound if the resulting path\n        would fall out of the root directory.\n        \"\"\"\n        try:\n            filename = self.readme_for(subpath)\n            return os.path.relpath(filename, self.root_directory)\n        except ReadmeNotFoundError:\n            return None\n\n    def is_binary(self, subpath=None):\n        \"\"\"\n        Gets whether the specified subpath is a supported binary file.\n        \"\"\"\n        mimetype = self.mimetype_for(subpath)\n      ",
        "file": "/Users/akash/Workspace/assignments/code-qa-api/data/grip-no-tests/grip/readers.py",
        "start_idx": 6500
    },
    {
        "text": "  return mimetype and not mimetype.startswith('text/')\n\n    def last_updated(self, subpath=None):\n        \"\"\"\n        Returns the time of the last modification of the Readme or\n        specified subpath, or None if the file does not exist.\n\n        The return value is a number giving the number of seconds since\n        the epoch (see the time module).\n\n        Raises werkzeug.exceptions.NotFound if the resulting path\n        would fall out of the root directory.\n        \"\"\"\n        try:\n        ",
        "file": "/Users/akash/Workspace/assignments/code-qa-api/data/grip-no-tests/grip/readers.py",
        "start_idx": 7000
    },
    {
        "text": "    return os.path.getmtime(self.readme_for(subpath))\n        except ReadmeNotFoundError:\n            return None\n        # OSError for Python 3 base class, EnvironmentError for Python 2\n        except (OSError, EnvironmentError) as ex:\n            if ex.errno == errno.ENOENT:\n                return None\n            raise\n\n    def read(self, subpath=None):\n        \"\"\"\n        Returns the UTF-8 content of the specified subpath.\n\n        subpath is expected to already have been normalized.\n\n      ",
        "file": "/Users/akash/Workspace/assignments/code-qa-api/data/grip-no-tests/grip/readers.py",
        "start_idx": 7500
    },
    {
        "text": "  Raises ReadmeNotFoundError if a README for the specified subpath\n        does not exist.\n\n        Raises werkzeug.exceptions.NotFound if the resulting path\n        would fall out of the root directory.\n        \"\"\"\n        is_binary = self.is_binary(subpath)\n        filename = self.readme_for(subpath)\n        try:\n            if is_binary:\n                return self._read_binary(filename)\n            return self._read_text(filename)\n        # OSError for Python 3 base class, EnvironmentError f",
        "file": "/Users/akash/Workspace/assignments/code-qa-api/data/grip-no-tests/grip/readers.py",
        "start_idx": 8000
    },
    {
        "text": "or Python 2\n        except (OSError, EnvironmentError) as ex:\n            if ex.errno == errno.ENOENT:\n                raise ReadmeNotFoundError(filename)\n            raise\n\n\nclass TextReader(ReadmeReader):\n    \"\"\"\n    Reads Readme content from the provided unicode string.\n    \"\"\"\n    def __init__(self, text, display_filename=None):\n        super(TextReader, self).__init__()\n        self.text = text\n        self.display_filename = display_filename\n\n    def filename_for(self, subpath):\n        \"\"",
        "file": "/Users/akash/Workspace/assignments/code-qa-api/data/grip-no-tests/grip/readers.py",
        "start_idx": 8500
    },
    {
        "text": "\"\n        Returns the display filename, or None if subpath is specified\n        since subpaths are not supported for text readers.\n        \"\"\"\n        if subpath is not None:\n            return None\n\n        return self.display_filename\n\n    def read(self, subpath=None):\n        \"\"\"\n        Returns the UTF-8 Readme content.\n\n        Raises ReadmeNotFoundError if subpath is specified since\n        subpaths are not supported for text readers.\n        \"\"\"\n        if subpath is not None:\n           ",
        "file": "/Users/akash/Workspace/assignments/code-qa-api/data/grip-no-tests/grip/readers.py",
        "start_idx": 9000
    },
    {
        "text": " raise ReadmeNotFoundError(subpath)\n\n        return self.text\n\n\nclass StdinReader(TextReader):\n    \"\"\"\n    Reads Readme text from STDIN.\n    \"\"\"\n    def __init__(self, display_filename=None):\n        super(StdinReader, self).__init__(None, display_filename)\n\n    def read(self, subpath=None):\n        \"\"\"\n        Returns the UTF-8 Readme content.\n\n        Raises ReadmeNotFoundError if subpath is specified since\n        subpaths are not supported for text readers.\n        \"\"\"\n        # Lazily read ",
        "file": "/Users/akash/Workspace/assignments/code-qa-api/data/grip-no-tests/grip/readers.py",
        "start_idx": 9500
    },
    {
        "text": "STDIN\n        if self.text is None and subpath is None:\n            self.text = self.read_stdin()\n\n        return super(StdinReader, self).read(subpath)\n\n    def read_stdin(self):\n        \"\"\"\n        Reads STDIN until the end of input and returns a unicode string.\n        \"\"\"\n        text = sys.stdin.read()\n\n        # Decode the bytes returned from earlier Python STDIN implementations\n        if sys.version_info[0] < 3 and text is not None:\n            text = text.decode(sys.stdin.encoding or 'u",
        "file": "/Users/akash/Workspace/assignments/code-qa-api/data/grip-no-tests/grip/readers.py",
        "start_idx": 10000
    },
    {
        "text": "tf-8')\n\n        return text\n",
        "file": "/Users/akash/Workspace/assignments/code-qa-api/data/grip-no-tests/grip/readers.py",
        "start_idx": 10500
    },
    {
        "text": "\"\"\"\\\ngrip.command\n~~~~~~~~~~~~\n\nImplements the command-line interface for Grip.\n\n\nUsage:\n  grip [options] [<path>] [<address>]\n  grip -V | --version\n  grip -h | --help\n\nWhere:\n  <path> is a file to render or a directory containing README.md (- for stdin)\n  <address> is what to listen on, of the form <host>[:<port>], or just <port>\n\nOptions:\n  --user-content    Render as user-content like comments or issues.\n  --context=<repo>  The repository context, only taken into account\n                    w",
        "file": "/Users/akash/Workspace/assignments/code-qa-api/data/grip-no-tests/grip/command.py",
        "start_idx": 0
    },
    {
        "text": "hen using --user-content.\n  --user=<username> A GitHub username for API authentication. If used\n                    without the --pass option, an upcoming password\n                    input will be necessary.\n  --pass=<password> A GitHub password or auth token for API auth.\n  --wide            Renders wide, i.e. when the side nav is collapsed.\n                    This only takes effect when --user-content is used.\n  --clear           Clears the cached styles and assets and exits.\n  --export     ",
        "file": "/Users/akash/Workspace/assignments/code-qa-api/data/grip-no-tests/grip/command.py",
        "start_idx": 500
    },
    {
        "text": "     Exports to <path>.html or README.md instead of\n                    serving, optionally using [<address>] as the out\n                    file (- for stdout).\n  --no-inline       Link to styles instead inlining when using --export.\n  -b --browser      Open a tab in the browser after the server starts.\n  --api-url=<url>   Specify a different base URL for the github API,\n                    for example that of a Github Enterprise instance.\n                    Default is the public API: https://",
        "file": "/Users/akash/Workspace/assignments/code-qa-api/data/grip-no-tests/grip/command.py",
        "start_idx": 1000
    },
    {
        "text": "api.github.com\n  --title=<title>   Manually sets the page's title.\n                    The default is the filename.\n  --norefresh       Do not automatically refresh the Readme content when\n                    the file changes.\n  --quiet           Do not print to the terminal.\n  --theme=<theme>   Theme to view markdown file (light mode or dark mode).\n                    Valid options (\"light\", \"dark\"). Default: \"light\"\n\"\"\"\n\nfrom __future__ import print_function\n\nimport sys\nimport mimetypes\nimport",
        "file": "/Users/akash/Workspace/assignments/code-qa-api/data/grip-no-tests/grip/command.py",
        "start_idx": 1500
    },
    {
        "text": " socket\nimport errno\n\nfrom docopt import docopt\nfrom getpass import getpass\nfrom path_and_address import resolve, split_address\n\nfrom . import __version__\nfrom .api import clear_cache, export, serve\nfrom .exceptions import ReadmeNotFoundError\n\n\nusage = '\\n\\n\\n'.join(__doc__.split('\\n\\n\\n')[1:])\nversion = 'Grip ' + __version__\n\n# Note: GitHub supports more than light mode and dark mode (exp: light-high-constrast, dark-high-constrast).\nVALID_THEME_OPTIONS = ['light', 'dark']\n\ndef main(argv=None, f",
        "file": "/Users/akash/Workspace/assignments/code-qa-api/data/grip-no-tests/grip/command.py",
        "start_idx": 2000
    },
    {
        "text": "orce_utf8=True, patch_svg=True):\n    \"\"\"\n    The entry point of the application.\n    \"\"\"\n    if force_utf8 and sys.version_info[0] == 2:\n        reload(sys)  # noqa\n        sys.setdefaultencoding('utf-8')\n    if patch_svg and sys.version_info[0] == 2 and sys.version_info[1] <= 6:\n        mimetypes.add_type('image/svg+xml', '.svg')\n\n    if argv is None:\n        argv = sys.argv[1:]\n\n    # Show specific errors\n    if '-a' in argv or '--address' in argv:\n        print('Use grip [options] <path> <add",
        "file": "/Users/akash/Workspace/assignments/code-qa-api/data/grip-no-tests/grip/command.py",
        "start_idx": 2500
    },
    {
        "text": "ress> instead of -a')\n        print('See grip -h for details')\n        return 2\n    if '-p' in argv or '--port' in argv:\n        print('Use grip [options] [<path>] [<hostname>:]<port> instead of -p')\n        print('See grip -h for details')\n        return 2\n\n    # Parse options\n    args = docopt(usage, argv=argv, version=version)\n\n    # Handle printing version with -V (docopt handles --version)\n    if args['-V']:\n        print(version)\n        return 0\n\n    # Clear the cache\n    if args['--clear",
        "file": "/Users/akash/Workspace/assignments/code-qa-api/data/grip-no-tests/grip/command.py",
        "start_idx": 3000
    },
    {
        "text": "']:\n        clear_cache()\n        return 0\n\n    # Get password from prompt if necessary\n    password = args['--pass']\n    if args['--user'] and not password:\n        password = getpass()\n\n    # Parse theme argument\n    if args['--theme']:\n        if args['--theme'] in VALID_THEME_OPTIONS:\n            theme: str = args['--theme']\n        else:\n            print('Error: valid options for theme argument are \"light\", \"dark\"')\n            return 1\n    else:\n        theme = 'light'\n\n    # Export to a ",
        "file": "/Users/akash/Workspace/assignments/code-qa-api/data/grip-no-tests/grip/command.py",
        "start_idx": 3500
    },
    {
        "text": "file instead of running a server\n    if args['--export']:\n        try:\n            export(args['<path>'], args['--user-content'], args['--context'],\n                   args['--user'], password, False, args['--wide'],\n                   not args['--no-inline'], args['<address>'],\n                   args['--api-url'], args['--title'], args['--quiet'], theme)\n            return 0\n        except ReadmeNotFoundError as ex:\n            print('Error:', ex)\n            return 1\n\n    # Parse arguments\n  ",
        "file": "/Users/akash/Workspace/assignments/code-qa-api/data/grip-no-tests/grip/command.py",
        "start_idx": 4000
    },
    {
        "text": "  path, address = resolve(args['<path>'], args['<address>'])\n    host, port = split_address(address)\n\n    # Validate address\n    if address and not host and port is None:\n        print('Error: Invalid address', repr(address))\n\n    # Run server\n    try:\n        serve(path, host, port, args['--user-content'], args['--context'],\n              args['--user'], password, False, args['--wide'], False,\n              args['--api-url'], args['--title'], not args['--norefresh'],\n              args['--brows",
        "file": "/Users/akash/Workspace/assignments/code-qa-api/data/grip-no-tests/grip/command.py",
        "start_idx": 4500
    },
    {
        "text": "er'], args['--quiet'], theme, None)\n        return 0\n    except ReadmeNotFoundError as ex:\n        print('Error:', ex)\n        return 1\n    except socket.error as ex:\n        print('Error:', ex)\n        if ex.errno == errno.EADDRINUSE:\n            print('This port is in use. Is a grip server already running? '\n                  'Stop that instance or specify another port here.')\n        return 1\n",
        "file": "/Users/akash/Workspace/assignments/code-qa-api/data/grip-no-tests/grip/command.py",
        "start_idx": 5000
    },
    {
        "text": "# The common titles and supported extensions,\n# as defined by https://github.com/github/markup\nSUPPORTED_TITLES = ['README', 'Readme', 'readme', 'Home']\nSUPPORTED_EXTENSIONS = ['.md', '.markdown']\n\n\n# The default filenames when no file is provided\nDEFAULT_FILENAMES = [title + ext\n                     for title in SUPPORTED_TITLES\n                     for ext in SUPPORTED_EXTENSIONS]\nDEFAULT_FILENAME = DEFAULT_FILENAMES[0]\n\n\n# The default directory to load Grip settings from\nDEFAULT_GRIPHOME = '~",
        "file": "/Users/akash/Workspace/assignments/code-qa-api/data/grip-no-tests/grip/constants.py",
        "start_idx": 0
    },
    {
        "text": "/.grip'\n\n\n# The default URL of the Grip server\nDEFAULT_GRIPURL = '/__/grip'\n\n\n# The public GitHub API\nDEFAULT_API_URL = 'https://api.github.com'\n\n\n# Style parsing\nSTYLE_URLS_SOURCE = 'https://github.com/joeyespo/grip'\n# Note: Using a list in case the implementation limitation is a problem\n# https://docs.python.org/3/library/re.html#re.findall\nSTYLE_URLS_RES = [\n    r'''<link\\b[^>]+\\bhref=['\"]?([^'\" >]+)['\"]?\\brel=['\"]?stylesheet['\"]?[^>]+[^>]*(?=>)''',\n    r'''<link\\b[^>]+\\brel=['\"]?stylesheet['",
        "file": "/Users/akash/Workspace/assignments/code-qa-api/data/grip-no-tests/grip/constants.py",
        "start_idx": 500
    },
    {
        "text": "\"]?[^>]+\\bhref=['\"]?([^'\" >]+)['\"]?[^>]*(?=>)''',\n]\nSTYLE_ASSET_URLS_RE = (\n    r'''url\\(['\"]?(/static/fonts/octicons/[^'\" \\)]+)['\"]?\\)''')\nSTYLE_ASSET_URLS_SUB_FORMAT = r'url(\"{0}\\1\")'\nSTYLE_ASSET_URLS_INLINE_FORMAT = (\n    r'''url\\(['\"]?((?:/static|{0})/[^'\" \\)]+)['\"]?\\)''')\n",
        "file": "/Users/akash/Workspace/assignments/code-qa-api/data/grip-no-tests/grip/constants.py",
        "start_idx": 1000
    },
    {
        "text": "\"\"\"\\\nGrip\n----\n\nRender local readme files before sending off to GitHub.\n\n:copyright: (c) 2014-2022 by Joe Esposito.\n:license: MIT, see LICENSE for more details.\n\"\"\"\n\n__version__ = '4.6.2'  # noqa\n\nimport sys\n\n# Patch for Flask 11.0+ on Python 3 (pypy3)\nif not hasattr(sys, 'exc_clear'):  # noqa\n    sys.exc_clear = lambda: None\n\nfrom .api import (\n    clear_cache, create_app, export, render_content, render_page, serve)\nfrom .app import Grip\nfrom .assets import GitHubAssetManager, ReadmeAssetManage",
        "file": "/Users/akash/Workspace/assignments/code-qa-api/data/grip-no-tests/grip/__init__.py",
        "start_idx": 0
    },
    {
        "text": "r\nfrom .command import main\nfrom .constants import (\n    DEFAULT_API_URL, DEFAULT_FILENAMES, DEFAULT_FILENAME, DEFAULT_GRIPHOME,\n    DEFAULT_GRIPURL, STYLE_ASSET_URLS_INLINE_FORMAT, STYLE_ASSET_URLS_RE,\n    STYLE_ASSET_URLS_SUB_FORMAT, STYLE_URLS_RES, STYLE_URLS_SOURCE,\n    SUPPORTED_EXTENSIONS, SUPPORTED_TITLES)\nfrom .exceptions import AlreadyRunningError, ReadmeNotFoundError\nfrom .readers import ReadmeReader, DirectoryReader, StdinReader, TextReader\nfrom .renderers import ReadmeRenderer, GitHu",
        "file": "/Users/akash/Workspace/assignments/code-qa-api/data/grip-no-tests/grip/__init__.py",
        "start_idx": 500
    },
    {
        "text": "bRenderer, OfflineRenderer\n\n\n__all__ = [\n    '__version__',\n\n    'DEFAULT_API_URL', 'DEFAULT_FILENAMES', 'DEFAULT_FILENAME',\n    'DEFAULT_GRIPHOME', 'DEFAULT_GRIPURL', 'STYLE_ASSET_URLS_INLINE_FORMAT',\n    'STYLE_ASSET_URLS_RE', 'STYLE_ASSET_URLS_SUB_FORMAT', 'STYLE_URLS_RES',\n    'STYLE_URLS_SOURCE', 'SUPPORTED_EXTENSIONS', 'SUPPORTED_TITLES',\n\n    'AlreadyRunningError', 'DirectoryReader', 'GitHubAssetManager',\n    'GitHubRenderer', 'Grip', 'OfflineRenderer', 'ReadmeNotFoundError',\n    'ReadmeA",
        "file": "/Users/akash/Workspace/assignments/code-qa-api/data/grip-no-tests/grip/__init__.py",
        "start_idx": 1000
    },
    {
        "text": "ssetManager', 'ReadmeReader', 'ReadmeRenderer', 'StdinReader',\n    'TextReader',\n\n    'clear_cache', 'create_app', 'export', 'main', 'render_content',\n    'render_page', 'serve',\n]\n",
        "file": "/Users/akash/Workspace/assignments/code-qa-api/data/grip-no-tests/grip/__init__.py",
        "start_idx": 1500
    },
    {
        "text": "from __future__ import print_function, unicode_literals\n\nimport json\nimport sys\nfrom abc import ABCMeta, abstractmethod\n\nimport requests\n\ntry:\n    import markdown\n    from .vendor.mdx_urlize import UrlizeExtension\nexcept ImportError:\n    markdown = None\n    UrlizeExtension = None\n\nfrom .constants import DEFAULT_API_URL\nfrom .patcher import patch\nfrom .vendor.six import add_metaclass\n\n\n@add_metaclass(ABCMeta)\nclass ReadmeRenderer(object):\n    \"\"\"\n    Renders the Readme.\n    \"\"\"\n    def __init__(s",
        "file": "/Users/akash/Workspace/assignments/code-qa-api/data/grip-no-tests/grip/renderers.py",
        "start_idx": 0
    },
    {
        "text": "elf, user_content=None, context=None):\n        if user_content is None:\n            user_content = False\n        super(ReadmeRenderer, self).__init__()\n        self.user_content = user_content\n        self.context = context\n\n    @abstractmethod\n    def render(self, text, auth=None):\n        \"\"\"\n        Renders the specified markdown content and embedded styles.\n        \"\"\"\n        pass\n\n\nclass GitHubRenderer(ReadmeRenderer):\n    \"\"\"\n    Renders the specified Readme using the GitHub Markdown API.",
        "file": "/Users/akash/Workspace/assignments/code-qa-api/data/grip-no-tests/grip/renderers.py",
        "start_idx": 500
    },
    {
        "text": "\n    \"\"\"\n    def __init__(self, user_content=None, context=None, api_url=None,\n                 raw=None):\n        if api_url is None:\n            api_url = DEFAULT_API_URL\n        super(GitHubRenderer, self).__init__(user_content, context)\n        self.api_url = api_url\n        self.raw = raw\n\n    def render(self, text, auth=None):\n        \"\"\"\n        Renders the specified markdown content and embedded styles.\n\n        Raises TypeError if text is not a Unicode string.\n        Raises requests.HT",
        "file": "/Users/akash/Workspace/assignments/code-qa-api/data/grip-no-tests/grip/renderers.py",
        "start_idx": 1000
    },
    {
        "text": "TPError if the request fails.\n        \"\"\"\n        # Ensure text is Unicode\n        expected = str if sys.version_info[0] >= 3 else unicode  # noqa\n        if not isinstance(text, expected):\n            raise TypeError(\n                'Expected a Unicode string, got {!r}.'.format(text))\n\n        if self.user_content:\n            url = '{0}/markdown'.format(self.api_url)\n            data = {'text': text, 'mode': 'gfm'}\n            if self.context:\n                data['context'] = self.context\n  ",
        "file": "/Users/akash/Workspace/assignments/code-qa-api/data/grip-no-tests/grip/renderers.py",
        "start_idx": 1500
    },
    {
        "text": "          data = json.dumps(data, ensure_ascii=False).encode('utf-8')\n            headers = {'content-type': 'application/json; charset=UTF-8'}\n        else:\n            url = '{0}/markdown/raw'.format(self.api_url)\n            data = text.encode('utf-8')\n            headers = {'content-type': 'text/x-markdown; charset=UTF-8'}\n\n        r = requests.post(url, headers=headers, data=data, auth=auth)\n        r.raise_for_status()\n\n        # FUTURE: Remove this once GitHub API properly handles Unicode",
        "file": "/Users/akash/Workspace/assignments/code-qa-api/data/grip-no-tests/grip/renderers.py",
        "start_idx": 2000
    },
    {
        "text": " markdown\n        r.encoding = 'utf-8'\n\n        return r.text if self.raw else patch(r.text)\n\n\nclass OfflineRenderer(ReadmeRenderer):\n    \"\"\"\n    Renders the specified Readme locally using pure Python.\n\n    Note: This is currently an incomplete feature.\n    \"\"\"\n    def __init__(self, user_content=None, context=None):\n        super(OfflineRenderer, self).__init__(user_content, context)\n\n    def render(self, text, auth=None):\n        \"\"\"\n        Renders the specified markdown content and embedded ",
        "file": "/Users/akash/Workspace/assignments/code-qa-api/data/grip-no-tests/grip/renderers.py",
        "start_idx": 2500
    },
    {
        "text": "styles.\n        \"\"\"\n        if markdown is None:\n            import markdown\n        if UrlizeExtension is None:\n            from .mdx_urlize import UrlizeExtension\n        return markdown.markdown(text, extensions=[\n            'fenced_code',\n            'codehilite(css_class=highlight)',\n            'toc',\n            'tables',\n            'sane_lists',\n            UrlizeExtension(),\n        ])\n",
        "file": "/Users/akash/Workspace/assignments/code-qa-api/data/grip-no-tests/grip/renderers.py",
        "start_idx": 3000
    },
    {
        "text": "import socket\nimport time\nimport webbrowser\nfrom threading import Thread\n\n\ndef is_server_running(host, port):\n    \"\"\"\n    Checks whether a server is currently listening on the specified\n    host and port.\n    \"\"\"\n    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    try:\n        return s.connect_ex((host, port)) == 0\n    finally:\n        s.close()\n\n\ndef wait_for_server(host, port, cancel_event=None):\n    \"\"\"\n    Blocks until a local server is listening on the specified\n    host and port.",
        "file": "/Users/akash/Workspace/assignments/code-qa-api/data/grip-no-tests/grip/browser.py",
        "start_idx": 0
    },
    {
        "text": " Set cancel_event to cancel the wait.\n\n    This is intended to be used in conjunction with running\n    the Flask server.\n    \"\"\"\n    while not is_server_running(host, port):\n        # Stop waiting if shutting down\n        if cancel_event and cancel_event.is_set():\n            return False\n        time.sleep(0.1)\n    return True\n\n\ndef start_browser(url):\n    \"\"\"\n    Opens the specified URL in a new browser window.\n    \"\"\"\n    try:\n        webbrowser.open(url)\n    except Exception:\n        pass\n\n\n",
        "file": "/Users/akash/Workspace/assignments/code-qa-api/data/grip-no-tests/grip/browser.py",
        "start_idx": 500
    },
    {
        "text": "def wait_and_start_browser(host, port=None, cancel_event=None):\n    \"\"\"\n    Waits for the server to run and then opens the specified address in\n    the browser. Set cancel_event to cancel the wait.\n    \"\"\"\n    if host == '0.0.0.0':\n        host = 'localhost'\n    if port is None:\n        port = 80\n\n    if wait_for_server(host, port, cancel_event):\n        start_browser('http://{0}:{1}/'.format(host, port))\n\n\ndef start_browser_when_ready(host, port=None, cancel_event=None):\n    \"\"\"\n    Starts a th",
        "file": "/Users/akash/Workspace/assignments/code-qa-api/data/grip-no-tests/grip/browser.py",
        "start_idx": 1000
    },
    {
        "text": "read that waits for the server then opens the specified\n    address in the browser. Set cancel_event to cancel the wait. The\n    started thread object is returned.\n    \"\"\"\n    browser_thread = Thread(\n        target=wait_and_start_browser, args=(host, port, cancel_event))\n    browser_thread.daemon = True\n    browser_thread.start()\n    return browser_thread\n",
        "file": "/Users/akash/Workspace/assignments/code-qa-api/data/grip-no-tests/grip/browser.py",
        "start_idx": 1500
    },
    {
        "text": "from __future__ import print_function, unicode_literals\n\nimport io\nimport os\nimport sys\nimport errno\n\nfrom .app import Grip\nfrom .readers import DirectoryReader, StdinReader, TextReader\nfrom .renderers import GitHubRenderer, OfflineRenderer\n\n\ndef create_app(path=None, user_content=False, context=None, username=None,\n               password=None, render_offline=False, render_wide=False,\n               render_inline=False, api_url=None, title=None, text=None,\n               autorefresh=None, quiet",
        "file": "/Users/akash/Workspace/assignments/code-qa-api/data/grip-no-tests/grip/api.py",
        "start_idx": 0
    },
    {
        "text": "=None, theme='light', grip_class=None):\n    \"\"\"\n    Creates a Grip application with the specified overrides.\n    \"\"\"\n    # Customize the app\n    if grip_class is None:\n        grip_class = Grip\n\n    # Customize the reader\n    if text is not None:\n        display_filename = DirectoryReader(path, True).filename_for(None)\n        source = TextReader(text, display_filename)\n    elif path == '-':\n        source = StdinReader()\n    else:\n        source = DirectoryReader(path)\n\n    # Customize the rend",
        "file": "/Users/akash/Workspace/assignments/code-qa-api/data/grip-no-tests/grip/api.py",
        "start_idx": 500
    },
    {
        "text": "erer\n    if render_offline:\n        renderer = OfflineRenderer(user_content, context)\n    elif user_content or context or api_url:\n        renderer = GitHubRenderer(user_content, context, api_url)\n    else:\n        renderer = None\n\n    # Optional basic auth\n    auth = (username, password) if username or password else None\n\n    # Create the customized app with default asset manager\n    return grip_class(source, auth, renderer, None, render_wide,\n                      render_inline, title, autoref",
        "file": "/Users/akash/Workspace/assignments/code-qa-api/data/grip-no-tests/grip/api.py",
        "start_idx": 1000
    },
    {
        "text": "resh, quiet, theme)\n\n\ndef serve(path=None, host=None, port=None, user_content=False, context=None,\n          username=None, password=None, render_offline=False,\n          render_wide=False, render_inline=False, api_url=None, title=None,\n          autorefresh=True, browser=False, quiet=None, theme='light', grip_class=None):\n    \"\"\"\n    Starts a server to render the specified file or directory containing\n    a README.\n    \"\"\"\n    app = create_app(path, user_content, context, username, password,\n  ",
        "file": "/Users/akash/Workspace/assignments/code-qa-api/data/grip-no-tests/grip/api.py",
        "start_idx": 1500
    },
    {
        "text": "                   render_offline, render_wide, render_inline, api_url,\n                     title, None, autorefresh, quiet, theme, grip_class)\n    app.run(host, port, open_browser=browser)\n\n\ndef clear_cache(grip_class=None):\n    \"\"\"\n    Clears the cached styles and assets.\n    \"\"\"\n    if grip_class is None:\n        grip_class = Grip\n    grip_class(StdinReader()).clear_cache()\n\n\ndef render_page(path=None, user_content=False, context=None,\n                username=None, password=None,\n          ",
        "file": "/Users/akash/Workspace/assignments/code-qa-api/data/grip-no-tests/grip/api.py",
        "start_idx": 2000
    },
    {
        "text": "      render_offline=False, render_wide=False, render_inline=False,\n                api_url=None, title=None, text=None, quiet=None, theme='light',\n                grip_class=None):\n    \"\"\"\n    Renders the specified markup text to an HTML page and returns it.\n    \"\"\"\n    return create_app(path, user_content, context, username, password,\n                      render_offline, render_wide, render_inline, api_url,\n                      title, text, False, quiet, theme, grip_class).render()\n\n\ndef ren",
        "file": "/Users/akash/Workspace/assignments/code-qa-api/data/grip-no-tests/grip/api.py",
        "start_idx": 2500
    },
    {
        "text": "der_content(text, user_content=False, context=None, username=None,\n                   password=None, render_offline=False, api_url=None):\n    \"\"\"\n    Renders the specified markup and returns the result.\n    \"\"\"\n    renderer = (GitHubRenderer(user_content, context, api_url)\n                if not render_offline else\n                OfflineRenderer(user_content, context))\n    auth = (username, password) if username or password else None\n    return renderer.render(text, auth)\n\n\ndef export(path=None",
        "file": "/Users/akash/Workspace/assignments/code-qa-api/data/grip-no-tests/grip/api.py",
        "start_idx": 3000
    },
    {
        "text": ", user_content=False, context=None,\n           username=None, password=None, render_offline=False,\n           render_wide=False, render_inline=True, out_filename=None,\n           api_url=None, title=None, quiet=False, theme='light', grip_class=None):\n    \"\"\"\n    Exports the rendered HTML to a file.\n    \"\"\"\n    export_to_stdout = out_filename == '-'\n    if out_filename is None:\n        if path == '-':\n            export_to_stdout = True\n        else:\n            filetitle, _ = os.path.splitext(\n ",
        "file": "/Users/akash/Workspace/assignments/code-qa-api/data/grip-no-tests/grip/api.py",
        "start_idx": 3500
    },
    {
        "text": "               os.path.relpath(DirectoryReader(path).root_filename))\n            out_filename = '{0}.html'.format(filetitle)\n\n    if not export_to_stdout and not quiet:\n        print('Exporting to', out_filename, file=sys.stderr)\n\n    page = render_page(path, user_content, context, username, password,\n                       render_offline, render_wide, render_inline, api_url,\n                       title, None, quiet, theme, grip_class)\n\n    if export_to_stdout:\n        try:\n            print(pa",
        "file": "/Users/akash/Workspace/assignments/code-qa-api/data/grip-no-tests/grip/api.py",
        "start_idx": 4000
    },
    {
        "text": "ge)\n        except IOError as ex:\n            if ex.errno != 0 and ex.errno != errno.EPIPE:\n                raise\n    else:\n        with io.open(out_filename, 'w', encoding='utf-8') as f:\n            f.write(page)\n",
        "file": "/Users/akash/Workspace/assignments/code-qa-api/data/grip-no-tests/grip/api.py",
        "start_idx": 4500
    },
    {
        "text": "from __future__ import print_function, unicode_literals\n\nimport errno\nimport os\nimport posixpath\nimport re\nimport sys\nimport shutil\nfrom abc import ABCMeta, abstractmethod\ntry:\n    from urlparse import urljoin\nexcept ImportError:\n    from urllib.parse import urljoin\n\nimport requests\n\nfrom ._compat import safe_join\n\nfrom .constants import (\n    STYLE_URLS_SOURCE, STYLE_URLS_RES, STYLE_ASSET_URLS_RE,\n    STYLE_ASSET_URLS_SUB_FORMAT)\nfrom .vendor.six import add_metaclass\n\n\n@add_metaclass(ABCMeta)\nc",
        "file": "/Users/akash/Workspace/assignments/code-qa-api/data/grip-no-tests/grip/assets.py",
        "start_idx": 0
    },
    {
        "text": "lass ReadmeAssetManager(object):\n    \"\"\"\n    Manages the style and font assets rendered with Readme pages.\n\n    Set cache_path to None to disable caching.\n    \"\"\"\n    def __init__(self, cache_path, style_urls=None, quiet=None):\n        super(ReadmeAssetManager, self).__init__()\n        self.cache_path = cache_path\n        self.style_urls = list(style_urls) if style_urls else []\n        self.styles = []\n        self.quiet = quiet\n\n    def _strip_url_params(self, url):\n        return url.rsplit('?",
        "file": "/Users/akash/Workspace/assignments/code-qa-api/data/grip-no-tests/grip/assets.py",
        "start_idx": 500
    },
    {
        "text": "', 1)[0].rsplit('#', 1)[0]\n\n    def clear(self):\n        \"\"\"\n        Clears the asset cache.\n        \"\"\"\n        if self.cache_path and os.path.exists(self.cache_path):\n            shutil.rmtree(self.cache_path)\n\n    def cache_filename(self, url):\n        \"\"\"\n        Gets a suitable relative filename for the specified URL.\n        \"\"\"\n        # FUTURE: Use url exactly instead of flattening it here\n        url = posixpath.basename(url)\n        return self._strip_url_params(url)\n\n    @abstractmeth",
        "file": "/Users/akash/Workspace/assignments/code-qa-api/data/grip-no-tests/grip/assets.py",
        "start_idx": 1000
    },
    {
        "text": "od\n    def retrieve_styles(self, asset_url_path):\n        \"\"\"\n        Get style URLs from the source HTML page and specified cached asset\n        URL path.\n        \"\"\"\n        pass\n\n\nclass GitHubAssetManager(ReadmeAssetManager):\n    \"\"\"\n    Reads the styles used for rendering Readme pages.\n\n    Set cache_path to None to disable caching.\n    \"\"\"\n    def __init__(self, cache_path, style_urls=None, quiet=None):\n        super(GitHubAssetManager, self).__init__(cache_path, style_urls, quiet)\n\n    def",
        "file": "/Users/akash/Workspace/assignments/code-qa-api/data/grip-no-tests/grip/assets.py",
        "start_idx": 1500
    },
    {
        "text": " _get_style_urls(self, asset_url_path):\n        \"\"\"\n        Gets the specified resource and parses all style URLs and their\n        assets in the form of the specified patterns.\n        \"\"\"\n        # Check cache\n        if self.cache_path:\n            cached = self._get_cached_style_urls(asset_url_path)\n            # Skip fetching styles if there's any already cached\n            if cached:\n                return cached\n\n        # Find style URLs\n        r = requests.get(STYLE_URLS_SOURCE)\n      ",
        "file": "/Users/akash/Workspace/assignments/code-qa-api/data/grip-no-tests/grip/assets.py",
        "start_idx": 2000
    },
    {
        "text": "  if not 200 <= r.status_code < 300:\n            print('Warning: retrieving styles gave status code',\n                  r.status_code, file=sys.stderr)\n        urls = []\n        content = r.text\n        for style_urls_re in STYLE_URLS_RES:\n            print(re.findall(style_urls_re, content))\n            urls.extend(re.findall(style_urls_re, content))\n        if not urls:\n            print('Warning: no styles found - see https://github.com/joeyespo/'\n                  'grip/issues/265', file=sys",
        "file": "/Users/akash/Workspace/assignments/code-qa-api/data/grip-no-tests/grip/assets.py",
        "start_idx": 2500
    },
    {
        "text": ".stderr)\n\n        # Cache the styles and their assets\n        if self.cache_path:\n            is_cached = self._cache_contents(urls, asset_url_path)\n            if is_cached:\n                urls = self._get_cached_style_urls(asset_url_path)\n\n        return urls\n\n    def _get_cached_style_urls(self, asset_url_path):\n        \"\"\"\n        Gets the URLs of the cached styles.\n        \"\"\"\n        try:\n            cached_styles = os.listdir(self.cache_path)\n        except IOError as ex:\n            if ",
        "file": "/Users/akash/Workspace/assignments/code-qa-api/data/grip-no-tests/grip/assets.py",
        "start_idx": 3000
    },
    {
        "text": "ex.errno != errno.ENOENT and ex.errno != errno.ESRCH:\n                raise\n            return []\n        except OSError:\n            return []\n        return [posixpath.join(asset_url_path, style)\n                for style in cached_styles\n                if style.endswith('.css')]\n\n    def _cache_contents(self, style_urls, asset_url_path):\n        \"\"\"\n        Fetches the given URLs and caches their contents\n        and their assets in the given directory.\n        \"\"\"\n        files = {}\n\n      ",
        "file": "/Users/akash/Workspace/assignments/code-qa-api/data/grip-no-tests/grip/assets.py",
        "start_idx": 3500
    },
    {
        "text": "  asset_urls = []\n        for style_url in style_urls:\n            if not self.quiet:\n                print(' * Downloading style', style_url, file=sys.stderr)\n            r = requests.get(style_url)\n            if not 200 <= r.status_code < 300:\n                print(' -> Warning: Style request responded with',\n                      r.status_code, file=sys.stderr)\n                files = None\n                continue\n            asset_content = r.text\n            # Find assets and replace their",
        "file": "/Users/akash/Workspace/assignments/code-qa-api/data/grip-no-tests/grip/assets.py",
        "start_idx": 4000
    },
    {
        "text": " base URLs with the cache directory\n            for url in re.findall(STYLE_ASSET_URLS_RE, asset_content):\n                asset_urls.append(urljoin(style_url, url))\n            contents = re.sub(\n                STYLE_ASSET_URLS_RE,\n                STYLE_ASSET_URLS_SUB_FORMAT.format(asset_url_path.rstrip('/')),\n                asset_content)\n            # Prepare cache\n            if files is not None:\n                filename = self.cache_filename(style_url)\n                files[filename] = c",
        "file": "/Users/akash/Workspace/assignments/code-qa-api/data/grip-no-tests/grip/assets.py",
        "start_idx": 4500
    },
    {
        "text": "ontents.encode('utf-8')\n\n        for asset_url in asset_urls:\n            if not self.quiet:\n                print(' * Downloading asset', asset_url, file=sys.stderr)\n            # Retrieve binary file and show message\n            r = requests.get(asset_url, stream=True)\n            if not 200 <= r.status_code < 300:\n                print(' -> Warning: Asset request responded with',\n                      r.status_code, file=sys.stderr)\n                files = None\n                continue\n      ",
        "file": "/Users/akash/Workspace/assignments/code-qa-api/data/grip-no-tests/grip/assets.py",
        "start_idx": 5000
    },
    {
        "text": "      # Prepare cache\n            if files is not None:\n                filename = self.cache_filename(asset_url)\n                files[filename] = r.raw.read(decode_content=True)\n\n        # Skip caching if something went wrong to try again next time\n        if not files:\n            return False\n\n        # Cache files if all downloads were successful\n        cache = {}\n        for relname in files:\n            cache[safe_join(self.cache_path, relname)] = files[relname]\n        if not os.path.ex",
        "file": "/Users/akash/Workspace/assignments/code-qa-api/data/grip-no-tests/grip/assets.py",
        "start_idx": 5500
    },
    {
        "text": "ists(self.cache_path):\n            os.makedirs(self.cache_path)\n        for filename in cache:\n            with open(filename, 'wb') as f:\n                f.write(cache[filename])\n        if not self.quiet:\n            print(\n                ' * Cached all downloads in', self.cache_path, file=sys.stderr)\n        return True\n\n    def retrieve_styles(self, asset_url_path):\n        \"\"\"\n        Get style URLs from the source HTML page and specified cached\n        asset base URL.\n        \"\"\"\n        ",
        "file": "/Users/akash/Workspace/assignments/code-qa-api/data/grip-no-tests/grip/assets.py",
        "start_idx": 6000
    },
    {
        "text": "if not asset_url_path.endswith('/'):\n            asset_url_path += '/'\n        self.style_urls.extend(self._get_style_urls(asset_url_path))\n",
        "file": "/Users/akash/Workspace/assignments/code-qa-api/data/grip-no-tests/grip/assets.py",
        "start_idx": 6500
    },
    {
        "text": "import re\n\n\nINCOMPLETE_TASK_RE = re.compile(r'<li>\\[ \\] (.*?)(<ul.*?>|</li>)', re.DOTALL)\nINCOMPLETE_TASK_SUB = (r'<li class=\"task-list-item\">'\n                       r'<input type=\"checkbox\" '\n                       r'class=\"task-list-item-checkbox\" disabled=\"\"> \\1\\2')\nCOMPLETE_TASK_RE = re.compile(r'<li>\\[x\\] (.*?)(<ul.*?>|</li>)', re.DOTALL)\nCOMPLETE_TASK_SUB = (r'<li class=\"task-list-item\">'\n                     r'<input type=\"checkbox\" class=\"task-list-item-checkbox\" '\n                     ",
        "file": "/Users/akash/Workspace/assignments/code-qa-api/data/grip-no-tests/grip/patcher.py",
        "start_idx": 0
    },
    {
        "text": "r'checked=\"\" disabled=\"\"> \\1\\2')\n\n\nHEADER_PATCH_RE = re.compile(r'<span>{:\"aria-hidden\"=&gt;\"true\", :class=&gt;'\n                             r'\"octicon octicon-link\"}</span>', re.DOTALL)\nHEADER_PATCH_SUB = r'<span class=\"octicon octicon-link\"></span>'\n\n\ndef patch(html, user_content=False):\n    \"\"\"\n    Processes the HTML rendered by the GitHub API, patching\n    any inconsistencies from the main site.\n    \"\"\"\n    # FUTURE: Remove this once GitHub API renders task lists\n    # https://github.com/is",
        "file": "/Users/akash/Workspace/assignments/code-qa-api/data/grip-no-tests/grip/patcher.py",
        "start_idx": 500
    },
    {
        "text": "aacs/github/issues/309\n    if not user_content:\n        html = INCOMPLETE_TASK_RE.sub(INCOMPLETE_TASK_SUB, html)\n        html = COMPLETE_TASK_RE.sub(COMPLETE_TASK_SUB, html)\n\n    # FUTURE: Remove this once GitHub API fixes the header bug\n    # https://github.com/joeyespo/grip/issues/244\n    html = HEADER_PATCH_RE.sub(HEADER_PATCH_SUB, html)\n\n    return html\n",
        "file": "/Users/akash/Workspace/assignments/code-qa-api/data/grip-no-tests/grip/patcher.py",
        "start_idx": 1000
    },
    {
        "text": "\"\"\"\\\nDefault Configuration\n\nDo NOT change the values here for risk of accidentally committing them.\nOverride them using command-line arguments or with a settings_local.py in\nthis directory or in ~/.grip/settings.py instead.\n\"\"\"\n\n\nHOST = 'localhost'\nPORT = 6419\nDEBUG = False\nDEBUG_GRIP = False\nCACHE_DIRECTORY = 'cache-{version}'\nAUTOREFRESH = True\nQUIET = False\n\n\n# Note: For security concerns, please don't save your GitHub password in your\n# local settings.py. Use a personal access token instead:",
        "file": "/Users/akash/Workspace/assignments/code-qa-api/data/grip-no-tests/grip/settings.py",
        "start_idx": 0
    },
    {
        "text": "\n# https://github.com/settings/tokens/new?scopes=\nUSERNAME = None\nPASSWORD = None\n\n\n# Custom GitHub API\nAPI_URL = None\n\n\n# Custom styles\nSTYLE_URLS = []\n",
        "file": "/Users/akash/Workspace/assignments/code-qa-api/data/grip-no-tests/grip/settings.py",
        "start_idx": 500
    },
    {
        "text": "from __future__ import print_function, unicode_literals\n\nimport base64\nimport json\nimport mimetypes\nimport os\nimport posixpath\nimport re\nimport socket\nimport sys\nimport threading\nimport time\nimport errno\nfrom traceback import format_exc\ntry:\n    from urlparse import urlparse\nexcept ImportError:\n    from urllib.parse import urlparse\ntry:\n    str_type = basestring\nexcept NameError:\n    str_type = str\n\nimport requests\nfrom flask import (\n    Flask, Response, abort, redirect, render_template, reques",
        "file": "/Users/akash/Workspace/assignments/code-qa-api/data/grip-no-tests/grip/app.py",
        "start_idx": 0
    },
    {
        "text": "t,\n    send_from_directory, url_for)\n\nfrom . import __version__\nfrom .assets import GitHubAssetManager, ReadmeAssetManager\nfrom .browser import start_browser_when_ready\nfrom .constants import (\n    DEFAULT_GRIPHOME, DEFAULT_GRIPURL, STYLE_ASSET_URLS_INLINE_FORMAT)\nfrom .exceptions import AlreadyRunningError, ReadmeNotFoundError\nfrom .readers import DirectoryReader\nfrom .renderers import GitHubRenderer, ReadmeRenderer\n\n\nclass Grip(Flask):\n    \"\"\"\n    A Flask application that can serve the specifi",
        "file": "/Users/akash/Workspace/assignments/code-qa-api/data/grip-no-tests/grip/app.py",
        "start_idx": 500
    },
    {
        "text": "ed file or directory\n    containing a README.\n    \"\"\"\n    def __init__(self, source=None, auth=None, renderer=None,\n                 assets=None, render_wide=None, render_inline=None, title=None,\n                 autorefresh=None, quiet=None, theme='light', grip_url=None,\n                 static_url_path=None, instance_path=None, **kwargs):\n        # Defaults\n        if source is None or isinstance(source, str_type):\n            source = DirectoryReader(source)\n        if render_wide is None:\n  ",
        "file": "/Users/akash/Workspace/assignments/code-qa-api/data/grip-no-tests/grip/app.py",
        "start_idx": 1000
    },
    {
        "text": "          render_wide = False\n        if render_inline is None:\n            render_inline = False\n\n        # Defaults from ENV\n        if grip_url is None:\n            grip_url = os.environ.get('GRIPURL')\n            if grip_url is None:\n                grip_url = DEFAULT_GRIPURL\n        grip_url = grip_url.rstrip('/')\n        if static_url_path is None:\n            static_url_path = posixpath.join(grip_url, 'static')\n        if instance_path is None:\n            instance_path = os.environ.get('",
        "file": "/Users/akash/Workspace/assignments/code-qa-api/data/grip-no-tests/grip/app.py",
        "start_idx": 1500
    },
    {
        "text": "GRIPHOME')\n            if instance_path is None:\n                instance_path = DEFAULT_GRIPHOME\n        instance_path = os.path.abspath(os.path.expanduser(instance_path))\n\n        # Flask application\n        super(Grip, self).__init__(\n            __name__, static_url_path=static_url_path,\n            instance_path=instance_path, **kwargs)\n        self.config.from_object('grip.settings')\n\n        try:\n            self.config.from_pyfile('settings_local.py', silent=True)\n            self.config",
        "file": "/Users/akash/Workspace/assignments/code-qa-api/data/grip-no-tests/grip/app.py",
        "start_idx": 2000
    },
    {
        "text": ".from_pyfile(\n                os.path.join(instance_path, 'settings.py'), silent=True)\n        except IOError as ex:\n            # Flask workaround for when ~/.grip exists but is not a directory\n            if ex.errno != errno.ENOTDIR:\n                raise\n\n        # Defaults from settings\n        if autorefresh is None:\n            autorefresh = self.config['AUTOREFRESH']\n        if quiet is None:\n            quiet = self.config['QUIET']\n        if auth is None:\n            username = self.co",
        "file": "/Users/akash/Workspace/assignments/code-qa-api/data/grip-no-tests/grip/app.py",
        "start_idx": 2500
    },
    {
        "text": "nfig['USERNAME']\n            password = self.config['PASSWORD']\n            if username or password:\n                auth = (username or '', password or '')\n\n        # Thread-safe event to signal to the polling threads to exit\n        self._run_mutex = threading.Lock()\n        self._shutdown_event = None\n\n        # Parameterized attributes\n        self.auth = auth\n        self.autorefresh = autorefresh\n        self.reader = source\n        self.renderer = renderer\n        self.assets = assets\n   ",
        "file": "/Users/akash/Workspace/assignments/code-qa-api/data/grip-no-tests/grip/app.py",
        "start_idx": 3000
    },
    {
        "text": "     self.render_wide = render_wide\n        self.render_inline = render_inline\n        self.title = title\n        self.quiet = quiet\n        if self.quiet:\n            import logging\n            log = logging.getLogger('werkzeug')\n            log.setLevel(logging.ERROR)\n        self.theme = theme\n\n        # Overridable attributes\n        if self.renderer is None:\n            renderer = self.default_renderer()\n            if not isinstance(renderer, ReadmeRenderer):\n                raise TypeErro",
        "file": "/Users/akash/Workspace/assignments/code-qa-api/data/grip-no-tests/grip/app.py",
        "start_idx": 3500
    },
    {
        "text": "r(\n                    'Expected Grip.default_renderer to return a '\n                    'ReadmeRenderer instance, got {0}.'.format(type(renderer)))\n            self.renderer = renderer\n        if self.assets is None:\n            assets = self.default_asset_manager()\n            if not isinstance(assets, ReadmeAssetManager):\n                raise TypeError(\n                    'Expected Grip.default_asset_manager to return an '\n                    'ReadmeAssetManager instance, got {0}.'.format(\n",
        "file": "/Users/akash/Workspace/assignments/code-qa-api/data/grip-no-tests/grip/app.py",
        "start_idx": 4000
    },
    {
        "text": "                        type(assets)))\n            self.assets = assets\n\n        # Add missing content types\n        self.add_content_types()\n\n        # Construct routes\n        asset_route = posixpath.join(grip_url, 'asset', '')\n        asset_subpath = posixpath.join(asset_route, '<path:subpath>')\n        refresh_route = posixpath.join(grip_url, 'refresh', '')\n        refresh_subpath = posixpath.join(refresh_route, '<path:subpath>')\n        rate_limit_route = posixpath.join(grip_url, 'rate-limi",
        "file": "/Users/akash/Workspace/assignments/code-qa-api/data/grip-no-tests/grip/app.py",
        "start_idx": 4500
    },
    {
        "text": "t-preview')\n\n        # Initialize views\n        self._styles_retrieved = False\n        self.before_request(self._retrieve_styles)\n        self.add_url_rule(asset_route, 'asset', self._render_asset)\n        self.add_url_rule(asset_subpath, 'asset', self._render_asset)\n        self.add_url_rule('/', 'render', self._render_page)\n        self.add_url_rule('/<path:subpath>', 'render', self._render_page)\n        self.add_url_rule(refresh_route, 'refresh', self._render_refresh)\n        self.add_url_rul",
        "file": "/Users/akash/Workspace/assignments/code-qa-api/data/grip-no-tests/grip/app.py",
        "start_idx": 5000
    },
    {
        "text": "e(refresh_subpath, 'refresh', self._render_refresh)\n        self.add_url_rule(rate_limit_route, 'rate_limit',\n                          self._render_rate_limit_page)\n        self.errorhandler(403)(self._render_rate_limit_page)\n\n    def _redirect_to_subpath(self, subpath=None):\n        \"\"\"\n        Redirects to the specified subpath, which is the relative path\n        part of the root location (i.e. the current working directory\n        or the path part of a URL excluding the initial '/').\n       ",
        "file": "/Users/akash/Workspace/assignments/code-qa-api/data/grip-no-tests/grip/app.py",
        "start_idx": 5500
    },
    {
        "text": " \"\"\"\n        route = posixpath.normpath('/' + (subpath or '').lstrip('/'))\n        return redirect(route)\n\n    def _render_asset(self, subpath):\n        \"\"\"\n        Renders the specified cache file.\n        \"\"\"\n        return send_from_directory(\n            self.assets.cache_path, self.assets.cache_filename(subpath))\n\n    def _render_page(self, subpath=None):\n        # Normalize the subpath\n        normalized = self.reader.normalize_subpath(subpath)\n        if normalized != subpath:\n           ",
        "file": "/Users/akash/Workspace/assignments/code-qa-api/data/grip-no-tests/grip/app.py",
        "start_idx": 6000
    },
    {
        "text": " return self._redirect_to_subpath(normalized)\n\n        # Read the Readme text or asset\n        try:\n            text = self.reader.read(subpath)\n        except ReadmeNotFoundError:\n            abort(404)\n\n        # Return binary asset\n        if self.reader.is_binary(subpath):\n            mimetype = self.reader.mimetype_for(subpath)\n            return Response(text, mimetype=mimetype)\n\n        # Render the Readme content\n        try:\n            content = self.renderer.render(text, self.auth)\n  ",
        "file": "/Users/akash/Workspace/assignments/code-qa-api/data/grip-no-tests/grip/app.py",
        "start_idx": 6500
    },
    {
        "text": "      except requests.HTTPError as ex:\n            if ex.response.status_code == 403:\n                abort(403)\n            raise\n        except requests.exceptions.SSLError as ex:\n            if 'TLSV1_ALERT_PROTOCOL_VERSION' in str(ex):\n                print('Error: GitHub has turned off TLS1.0 support. '\n                      'Please upgrade your version of Python or Homebrew '\n                      'to use a later version of openssl. '\n                      'For more information, see '\n    ",
        "file": "/Users/akash/Workspace/assignments/code-qa-api/data/grip-no-tests/grip/app.py",
        "start_idx": 7000
    },
    {
        "text": "                  'https://github.com/joeyespo/grip/issues/262')\n                abort(500)\n            raise\n\n        # Inline favicon asset\n        favicon = None\n        if self.render_inline:\n            favicon_url = url_for('static', filename='favicon.ico')\n            favicon = self._to_data_url(favicon_url, 'image/x-icon')\n\n        autorefresh_url = (url_for('refresh', subpath=subpath)\n                           if self.autorefresh\n                           else None)\n\n        if self.t",
        "file": "/Users/akash/Workspace/assignments/code-qa-api/data/grip-no-tests/grip/app.py",
        "start_idx": 7500
    },
    {
        "text": "heme == 'dark':\n            data_color_mode = 'dark'\n            data_light_theme = 'light'\n            data_dark_theme = 'dark'\n        else:\n            data_color_mode = 'light'\n            data_light_theme = 'light'\n            data_dark_theme = 'dark'\n\n        return render_template(\n            'index.html', filename=self.reader.filename_for(subpath),\n            title=self.title, content=content, favicon=favicon,\n            user_content=self.renderer.user_content,\n            wide_style=",
        "file": "/Users/akash/Workspace/assignments/code-qa-api/data/grip-no-tests/grip/app.py",
        "start_idx": 8000
    },
    {
        "text": "self.render_wide, style_urls=self.assets.style_urls,\n            styles=self.assets.styles, autorefresh_url=autorefresh_url,\n            data_color_mode=data_color_mode, data_light_theme=data_light_theme,\n            data_dark_theme=data_dark_theme)\n\n    def _render_refresh(self, subpath=None):\n        if not self.autorefresh:\n            abort(404)\n\n        # Normalize the subpath\n        normalized = self.reader.normalize_subpath(subpath)\n        if normalized != subpath:\n            return se",
        "file": "/Users/akash/Workspace/assignments/code-qa-api/data/grip-no-tests/grip/app.py",
        "start_idx": 8500
    },
    {
        "text": "lf._redirect_to_subpath(normalized)\n\n        # Get the full filename for display\n        filename = self.reader.filename_for(subpath)\n\n        # Check whether app is running\n        shutdown_event = self._shutdown_event\n        if not shutdown_event or shutdown_event.is_set():\n            return ''\n\n        def gen():\n            last_updated = self.reader.last_updated(subpath)\n            try:\n                while not shutdown_event.is_set():\n                    time.sleep(0.3)\n\n              ",
        "file": "/Users/akash/Workspace/assignments/code-qa-api/data/grip-no-tests/grip/app.py",
        "start_idx": 9000
    },
    {
        "text": "      # Check for update\n                    updated = self.reader.last_updated(subpath)\n                    if updated == last_updated:\n                        continue\n                    last_updated = updated\n                    # Notify user that a refresh is in progress\n                    if not self.quiet:\n                        print(' * Change detected in {0}, refreshing'\n                              .format(filename))\n                    yield 'data: {0}\\r\\n\\r\\n'.format(\n           ",
        "file": "/Users/akash/Workspace/assignments/code-qa-api/data/grip-no-tests/grip/app.py",
        "start_idx": 9500
    },
    {
        "text": "             json.dumps({'updating': True}))\n                    # Binary assets not supported\n                    if self.reader.is_binary(subpath):\n                        return\n                    # Read the Readme text\n                    try:\n                        text = self.reader.read(subpath)\n                    except ReadmeNotFoundError:\n                        return\n                    # Render the Readme content\n                    try:\n                        content = self.ren",
        "file": "/Users/akash/Workspace/assignments/code-qa-api/data/grip-no-tests/grip/app.py",
        "start_idx": 10000
    },
    {
        "text": "derer.render(text, self.auth)\n                    except requests.HTTPError as ex:\n                        if ex.response.status_code == 403:\n                            abort(403)\n                        raise\n                    # Return the Readme content\n                    yield 'data: {0}\\r\\n\\r\\n'.format(\n                        json.dumps({'content': content}))\n            except GeneratorExit:\n                pass\n\n        return Response(gen(), mimetype='text/event-stream')\n\n    def _re",
        "file": "/Users/akash/Workspace/assignments/code-qa-api/data/grip-no-tests/grip/app.py",
        "start_idx": 10500
    },
    {
        "text": "nder_rate_limit_page(self, exception=None):\n        \"\"\"\n        Renders the rate limit page.\n        \"\"\"\n        auth = request.args.get('auth')\n        is_auth = auth == '1' if auth else bool(self.auth)\n        return render_template('limit.html', is_authenticated=is_auth), 403\n\n    def _download(self, url, binary=False):\n        if urlparse(url).netloc:\n            r = requests.get(url)\n            return r.content if binary else r.text\n\n        with self.test_client() as c:\n            r = c.",
        "file": "/Users/akash/Workspace/assignments/code-qa-api/data/grip-no-tests/grip/app.py",
        "start_idx": 11000
    },
    {
        "text": "get(url)\n            charset = r.mimetype_params.get('charset', 'utf-8')\n            data = c.get(url).data\n            return data if binary else data.decode(charset)\n\n    def _to_data_url(self, url, content_type):\n        asset = self._download(url, binary=True)\n        asset64_bytes = base64.b64encode(asset)\n        asset64_string = asset64_bytes.decode('ascii')\n        return 'data:{0};base64,{1}'.format(content_type, asset64_string)\n\n    def _match_asset(self, match):\n        url = match.gr",
        "file": "/Users/akash/Workspace/assignments/code-qa-api/data/grip-no-tests/grip/app.py",
        "start_idx": 11500
    },
    {
        "text": "oup(1)\n        ext = os.path.splitext(url)[1][1:]\n        return 'url({0})'.format(\n            self._to_data_url(url, 'font/' + ext))\n\n    def _get_styles(self, style_urls, asset_url_path):\n        \"\"\"\n        Gets the content of the given list of style URLs and\n        inlines assets.\n        \"\"\"\n        styles = []\n        for style_url in style_urls:\n            urls_inline = STYLE_ASSET_URLS_INLINE_FORMAT.format(\n                asset_url_path.rstrip('/'))\n            asset_content = self._",
        "file": "/Users/akash/Workspace/assignments/code-qa-api/data/grip-no-tests/grip/app.py",
        "start_idx": 12000
    },
    {
        "text": "download(style_url)\n            content = re.sub(urls_inline, self._match_asset, asset_content)\n            styles.append(content)\n\n        return styles\n\n    def _inline_styles(self):\n        \"\"\"\n        Downloads the assets from the style URL list, clears it, and adds\n        each style with its embedded asset to the literal style list.\n        \"\"\"\n        styles = self._get_styles(self.assets.style_urls, url_for('asset'))\n        self.assets.styles.extend(styles)\n        self.assets.style_url",
        "file": "/Users/akash/Workspace/assignments/code-qa-api/data/grip-no-tests/grip/app.py",
        "start_idx": 12500
    },
    {
        "text": "s[:] = []\n\n    def _retrieve_styles(self):\n        \"\"\"\n        Retrieves the style URLs from the source and caches them. This\n        is called before the first request is dispatched.\n        \"\"\"\n        if self._styles_retrieved:\n            return\n        self._styles_retrieved = True\n\n        try:\n            self.assets.retrieve_styles(url_for('asset'))\n        except Exception as ex:\n            if self.debug:\n                print(format_exc(), file=sys.stderr)\n            else:\n          ",
        "file": "/Users/akash/Workspace/assignments/code-qa-api/data/grip-no-tests/grip/app.py",
        "start_idx": 13000
    },
    {
        "text": "      print(' * Error: could not retrieve styles:', ex,\n                      file=sys.stderr)\n        if self.render_inline:\n            self._inline_styles()\n\n    def default_renderer(self):\n        \"\"\"\n        Returns the default renderer using the current config.\n\n        This is only used if renderer is set to None in the constructor.\n        \"\"\"\n        return GitHubRenderer(api_url=self.config['API_URL'])\n\n    def default_asset_manager(self):\n        \"\"\"\n        Returns the default asset ",
        "file": "/Users/akash/Workspace/assignments/code-qa-api/data/grip-no-tests/grip/app.py",
        "start_idx": 13500
    },
    {
        "text": "manager using the current config.\n\n        This is only used if asset_manager is set to None in the constructor.\n        \"\"\"\n        cache_path = None\n        cache_directory = self.config['CACHE_DIRECTORY']\n        if cache_directory:\n            cache_directory = cache_directory.format(version=__version__)\n            cache_path = os.path.join(self.instance_path, cache_directory)\n        return GitHubAssetManager(\n            cache_path, self.config['STYLE_URLS'], self.quiet)\n\n    def add_cont",
        "file": "/Users/akash/Workspace/assignments/code-qa-api/data/grip-no-tests/grip/app.py",
        "start_idx": 14000
    },
    {
        "text": "ent_types(self):\n        \"\"\"\n        Adds the application/x-font-woff and application/octet-stream\n        content types if they are missing.\n\n        Override to add additional content types on initialization.\n        \"\"\"\n        mimetypes.add_type('application/x-font-woff', '.woff')\n        mimetypes.add_type('application/octet-stream', '.ttf')\n\n    def clear_cache(self):\n        self.assets.clear()\n        if not self.quiet:\n            print('Cache cleared.')\n\n    def render(self, route=None",
        "file": "/Users/akash/Workspace/assignments/code-qa-api/data/grip-no-tests/grip/app.py",
        "start_idx": 14500
    },
    {
        "text": "):\n        \"\"\"\n        Renders the application and returns the HTML unicode that would\n        normally appear when visiting in the browser.\n        \"\"\"\n        if route is None:\n            route = '/'\n        with self.test_client() as c:\n            response = c.get(route, follow_redirects=True)\n            encoding = getattr(response, 'charset', 'utf-8')\n            return response.data.decode(encoding)\n\n    def run(self, host=None, port=None, debug=None, use_reloader=None,\n            open_",
        "file": "/Users/akash/Workspace/assignments/code-qa-api/data/grip-no-tests/grip/app.py",
        "start_idx": 15000
    },
    {
        "text": "browser=False):\n        \"\"\"\n        Starts a server to render the README.\n        \"\"\"\n        if host is None:\n            host = self.config['HOST']\n        if port is None:\n            port = self.config['PORT']\n        if debug is None:\n            debug = self.debug\n        if use_reloader is None:\n            use_reloader = self.config['DEBUG_GRIP']\n\n        # Verify the server is not already running and start\n        with self._run_mutex:\n            if self._shutdown_event:\n              ",
        "file": "/Users/akash/Workspace/assignments/code-qa-api/data/grip-no-tests/grip/app.py",
        "start_idx": 15500
    },
    {
        "text": "  raise AlreadyRunningError()\n            self._shutdown_event = threading.Event()\n\n        # Authentication message\n        if self.auth and not self.quiet:\n            if isinstance(self.auth, tuple):\n                username, password = self.auth\n                auth_method = ('credentials: {0}'.format(username)\n                               if username\n                               else 'personal access token')\n            else:\n                auth_method = type(self.auth).__name__\n      ",
        "file": "/Users/akash/Workspace/assignments/code-qa-api/data/grip-no-tests/grip/app.py",
        "start_idx": 16000
    },
    {
        "text": "      print(' * Using', auth_method, file=sys.stderr)\n\n        # Get random port manually when needed ahead of time\n        if port == 0 and open_browser:\n            sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n            sock.bind(('localhost', 0))\n            port = sock.getsockname()[1]\n            sock.close()\n\n        # Open browser\n        browser_thread = (\n            start_browser_when_ready(host, port, self._shutdown_event)\n            if open_browser else None)\n\n        ",
        "file": "/Users/akash/Workspace/assignments/code-qa-api/data/grip-no-tests/grip/app.py",
        "start_idx": 16500
    },
    {
        "text": "# Run local server\n        super(Grip, self).run(host, port, debug=debug,\n                              use_reloader=use_reloader,\n                              threaded=True)\n\n        # Signal to the polling and browser threads that they should exit\n        if not self.quiet:\n            print(' * Shutting down...')\n        self._shutdown_event.set()\n\n        # Wait for browser thread to finish\n        if browser_thread:\n            browser_thread.join()\n\n        # Cleanup\n        self._shutdow",
        "file": "/Users/akash/Workspace/assignments/code-qa-api/data/grip-no-tests/grip/app.py",
        "start_idx": 17000
    },
    {
        "text": "n_event = None\n",
        "file": "/Users/akash/Workspace/assignments/code-qa-api/data/grip-no-tests/grip/app.py",
        "start_idx": 17500
    },
    {
        "text": "import errno\ntry:\n    NotFoundError = FileNotFoundError\nexcept NameError:\n    NotFoundError = IOError\n\n\nclass AlreadyRunningError(RuntimeError):\n    pass\n\n\nclass ReadmeNotFoundError(NotFoundError):\n    \"\"\"\n    This class inherits from FileNotFoundError on Python 3 and above.\n    \"\"\"\n    def __init__(self, path=None, message=None):\n        self.path = path\n        self.message = message\n        super(ReadmeNotFoundError, self).__init__(\n            errno.ENOENT, 'README not found', path)\n\n    def",
        "file": "/Users/akash/Workspace/assignments/code-qa-api/data/grip-no-tests/grip/exceptions.py",
        "start_idx": 0
    },
    {
        "text": " __repr__(self):\n        return '{0}({!r}, {!r})'.format(\n            type(self).__name__, self.path, self.message)\n\n    def __str__(self):\n        if self.message:\n            return self.message\n\n        if self.path is not None:\n            return 'No README found at {0}'.format(self.path)\n\n        return self.strerror\n",
        "file": "/Users/akash/Workspace/assignments/code-qa-api/data/grip-no-tests/grip/exceptions.py",
        "start_idx": 500
    },
    {
        "text": "# TODO: Use Werkzeug's directly after dropping support for older Flask versions\ntry:\n    # Use older Flask implementation directly to ensure backwards compatibility\n    from flask import safe_join\nexcept ImportError:\n    import werkzeug.utils\n    from werkzeug.exceptions import NotFound\n\n    # Use port of Flask 2.0 safe_join to match behavior\n    def safe_join(directory, *pathnames):\n        \"\"\"Safely join zero or more untrusted path components to a base\n        directory to avoid escaping the b",
        "file": "/Users/akash/Workspace/assignments/code-qa-api/data/grip-no-tests/grip/_compat.py",
        "start_idx": 0
    },
    {
        "text": "ase directory.\n\n        :param directory: The trusted base directory.\n        :param pathnames: The untrusted path components relative to the\n            base directory.\n        :return: A safe path.\n        \"\"\"\n        path = werkzeug.utils.safe_join(directory, *pathnames)\n\n        if path is None:\n            raise NotFound()\n\n        return path\n\n\n__all__ = ['safe_join']\n",
        "file": "/Users/akash/Workspace/assignments/code-qa-api/data/grip-no-tests/grip/_compat.py",
        "start_idx": 500
    },
    {
        "text": "\"\"\"\\\nGrip\n----\n\nRender local readme files before sending off to GitHub.\n\n:copyright: (c) 2014-2022 by Joe Esposito.\n:license: MIT, see LICENSE for more details.\n\"\"\"\n\nimport os\nimport sys\n\n\nif __name__ == '__main__':\n    sys.path.insert(1, os.path.dirname(os.path.dirname(\n        os.path.abspath(__file__))))\n\n    from grip.command import main\n    main()\n",
        "file": "/Users/akash/Workspace/assignments/code-qa-api/data/grip-no-tests/grip/__main__.py",
        "start_idx": 0
    },
    {
        "text": "\n@font-face {\n  font-family:\"Octicons\";\n  src:url(\"octicons.eot?ef21c39f0ca9b1b5116e5eb7ac5eabe6\");\n  src:url(\"octicons.eot?#iefix\") format(\"embedded-opentype\"),\n\t\turl(\"octicons.woff2?ef21c39f0ca9b1b5116e5eb7ac5eabe6\") format(\"woff2\"),\n\t\turl(\"octicons.woff?ef21c39f0ca9b1b5116e5eb7ac5eabe6\") format(\"woff\"),\n\t\turl(\"octicons.ttf?ef21c39f0ca9b1b5116e5eb7ac5eabe6\") format(\"truetype\"),\n\t\turl(\"octicons.svg?ef21c39f0ca9b1b5116e5eb7ac5eabe6#octicons\") format(\"svg\");\n  font-weight:normal;\n  font-style:nor",
        "file": "/Users/akash/Workspace/assignments/code-qa-api/data/grip-no-tests/grip/static/octicons/octicons.css",
        "start_idx": 0
    },
    {
        "text": "mal;\n}\n\n\n/*\n\n.octicon is optimized for 16px.\n.mega-octicon is optimized for 32px but can be used larger.\n\n*/\n.octicon, .mega-octicon {\n  font: normal normal normal 16px/1 Octicons;\n  display: inline-block;\n  text-decoration: none;\n  text-rendering: auto;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n  -webkit-user-select: none;\n  -ms-user-select: none;\n  user-select: none;\n  speak: none;\n}\n.mega-octicon { font-size: 32px; }\n\n.octicon-alert:before { content:\"\\f02d\";",
        "file": "/Users/akash/Workspace/assignments/code-qa-api/data/grip-no-tests/grip/static/octicons/octicons.css",
        "start_idx": 500
    },
    {
        "text": " }\n\n.octicon-arrow-down:before { content:\"\\f03f\"; }\n\n.octicon-arrow-left:before { content:\"\\f040\"; }\n\n.octicon-arrow-right:before { content:\"\\f03e\"; }\n\n.octicon-arrow-small-down:before { content:\"\\f0a0\"; }\n\n.octicon-arrow-small-left:before { content:\"\\f0a1\"; }\n\n.octicon-arrow-small-right:before { content:\"\\f071\"; }\n\n.octicon-arrow-small-up:before { content:\"\\f09f\"; }\n\n.octicon-arrow-up:before { content:\"\\f03d\"; }\n\n.octicon-beaker:before { content:\"\\f0dd\"; }\n\n.octicon-bell:before { content:\"\\f0de",
        "file": "/Users/akash/Workspace/assignments/code-qa-api/data/grip-no-tests/grip/static/octicons/octicons.css",
        "start_idx": 1000
    },
    {
        "text": "\"; }\n\n.octicon-bold:before { content:\"\\f0e2\"; }\n\n.octicon-book:before { content:\"\\f007\"; }\n\n.octicon-bookmark:before { content:\"\\f07b\"; }\n\n.octicon-briefcase:before { content:\"\\f0d3\"; }\n\n.octicon-broadcast:before { content:\"\\f048\"; }\n\n.octicon-browser:before { content:\"\\f0c5\"; }\n\n.octicon-bug:before { content:\"\\f091\"; }\n\n.octicon-calendar:before { content:\"\\f068\"; }\n\n.octicon-check:before { content:\"\\f03a\"; }\n\n.octicon-checklist:before { content:\"\\f076\"; }\n\n.octicon-chevron-down:before { content",
        "file": "/Users/akash/Workspace/assignments/code-qa-api/data/grip-no-tests/grip/static/octicons/octicons.css",
        "start_idx": 1500
    },
    {
        "text": ":\"\\f0a3\"; }\n\n.octicon-chevron-left:before { content:\"\\f0a4\"; }\n\n.octicon-chevron-right:before { content:\"\\f078\"; }\n\n.octicon-chevron-up:before { content:\"\\f0a2\"; }\n\n.octicon-circle-slash:before { content:\"\\f084\"; }\n\n.octicon-circuit-board:before { content:\"\\f0d6\"; }\n\n.octicon-clippy:before { content:\"\\f035\"; }\n\n.octicon-clock:before { content:\"\\f046\"; }\n\n.octicon-cloud-download:before { content:\"\\f00b\"; }\n\n.octicon-cloud-upload:before { content:\"\\f00c\"; }\n\n.octicon-code:before { content:\"\\f05f\";",
        "file": "/Users/akash/Workspace/assignments/code-qa-api/data/grip-no-tests/grip/static/octicons/octicons.css",
        "start_idx": 2000
    },
    {
        "text": " }\n\n.octicon-comment-discussion:before { content:\"\\f04f\"; }\n\n.octicon-comment:before { content:\"\\f02b\"; }\n\n.octicon-credit-card:before { content:\"\\f045\"; }\n\n.octicon-dash:before { content:\"\\f0ca\"; }\n\n.octicon-dashboard:before { content:\"\\f07d\"; }\n\n.octicon-database:before { content:\"\\f096\"; }\n\n.octicon-desktop-download:before { content:\"\\f0dc\"; }\n\n.octicon-device-camera-video:before { content:\"\\f057\"; }\n\n.octicon-device-camera:before { content:\"\\f056\"; }\n\n.octicon-device-desktop:before { content",
        "file": "/Users/akash/Workspace/assignments/code-qa-api/data/grip-no-tests/grip/static/octicons/octicons.css",
        "start_idx": 2500
    },
    {
        "text": ":\"\\f27c\"; }\n\n.octicon-device-mobile:before { content:\"\\f038\"; }\n\n.octicon-diff-added:before { content:\"\\f06b\"; }\n\n.octicon-diff-ignored:before { content:\"\\f099\"; }\n\n.octicon-diff-modified:before { content:\"\\f06d\"; }\n\n.octicon-diff-removed:before { content:\"\\f06c\"; }\n\n.octicon-diff-renamed:before { content:\"\\f06e\"; }\n\n.octicon-diff:before { content:\"\\f04d\"; }\n\n.octicon-ellipses:before { content:\"\\f101\"; }\n\n.octicon-ellipsis:before { content:\"\\f09a\"; }\n\n.octicon-eye:before { content:\"\\f04e\"; }\n\n.o",
        "file": "/Users/akash/Workspace/assignments/code-qa-api/data/grip-no-tests/grip/static/octicons/octicons.css",
        "start_idx": 3000
    },
    {
        "text": "cticon-file-binary:before { content:\"\\f094\"; }\n\n.octicon-file-code:before { content:\"\\f010\"; }\n\n.octicon-file-directory:before { content:\"\\f016\"; }\n\n.octicon-file-media:before { content:\"\\f012\"; }\n\n.octicon-file-pdf:before { content:\"\\f014\"; }\n\n.octicon-file-submodule:before { content:\"\\f017\"; }\n\n.octicon-file-symlink-directory:before { content:\"\\f0b1\"; }\n\n.octicon-file-symlink-file:before { content:\"\\f0b0\"; }\n\n.octicon-file-text:before { content:\"\\f011\"; }\n\n.octicon-file-zip:before { content:\"\\",
        "file": "/Users/akash/Workspace/assignments/code-qa-api/data/grip-no-tests/grip/static/octicons/octicons.css",
        "start_idx": 3500
    },
    {
        "text": "f013\"; }\n\n.octicon-file:before { content:\"\\f102\"; }\n\n.octicon-flame:before { content:\"\\f0d2\"; }\n\n.octicon-fold:before { content:\"\\f0cc\"; }\n\n.octicon-gear:before { content:\"\\f02f\"; }\n\n.octicon-gift:before { content:\"\\f042\"; }\n\n.octicon-gist-secret:before { content:\"\\f08c\"; }\n\n.octicon-gist:before { content:\"\\f00e\"; }\n\n.octicon-git-branch:before { content:\"\\f020\"; }\n\n.octicon-git-commit:before { content:\"\\f01f\"; }\n\n.octicon-git-compare:before { content:\"\\f0ac\"; }\n\n.octicon-git-merge:before { conte",
        "file": "/Users/akash/Workspace/assignments/code-qa-api/data/grip-no-tests/grip/static/octicons/octicons.css",
        "start_idx": 4000
    },
    {
        "text": "nt:\"\\f023\"; }\n\n.octicon-git-pull-request:before { content:\"\\f009\"; }\n\n.octicon-globe:before { content:\"\\f0b6\"; }\n\n.octicon-grabber:before { content:\"\\f103\"; }\n\n.octicon-graph:before { content:\"\\f043\"; }\n\n.octicon-heart:before { content:\"\\2665\"; }\n\n.octicon-history:before { content:\"\\f07e\"; }\n\n.octicon-home:before { content:\"\\f08d\"; }\n\n.octicon-horizontal-rule:before { content:\"\\f070\"; }\n\n.octicon-hubot:before { content:\"\\f09d\"; }\n\n.octicon-inbox:before { content:\"\\f0cf\"; }\n\n.octicon-info:before ",
        "file": "/Users/akash/Workspace/assignments/code-qa-api/data/grip-no-tests/grip/static/octicons/octicons.css",
        "start_idx": 4500
    },
    {
        "text": "{ content:\"\\f059\"; }\n\n.octicon-issue-closed:before { content:\"\\f028\"; }\n\n.octicon-issue-opened:before { content:\"\\f026\"; }\n\n.octicon-issue-reopened:before { content:\"\\f027\"; }\n\n.octicon-italic:before { content:\"\\f0e4\"; }\n\n.octicon-jersey:before { content:\"\\f019\"; }\n\n.octicon-key:before { content:\"\\f049\"; }\n\n.octicon-keyboard:before { content:\"\\f00d\"; }\n\n.octicon-law:before { content:\"\\f0d8\"; }\n\n.octicon-light-bulb:before { content:\"\\f000\"; }\n\n.octicon-link-external:before { content:\"\\f07f\"; }\n\n.",
        "file": "/Users/akash/Workspace/assignments/code-qa-api/data/grip-no-tests/grip/static/octicons/octicons.css",
        "start_idx": 5000
    },
    {
        "text": "octicon-link:before { content:\"\\f05c\"; }\n\n.octicon-list-ordered:before { content:\"\\f062\"; }\n\n.octicon-list-unordered:before { content:\"\\f061\"; }\n\n.octicon-location:before { content:\"\\f060\"; }\n\n.octicon-lock:before { content:\"\\f06a\"; }\n\n.octicon-logo-gist:before { content:\"\\f0ad\"; }\n\n.octicon-logo-github:before { content:\"\\f092\"; }\n\n.octicon-mail-read:before { content:\"\\f03c\"; }\n\n.octicon-mail-reply:before { content:\"\\f051\"; }\n\n.octicon-mail:before { content:\"\\f03b\"; }\n\n.octicon-mark-github:befor",
        "file": "/Users/akash/Workspace/assignments/code-qa-api/data/grip-no-tests/grip/static/octicons/octicons.css",
        "start_idx": 5500
    },
    {
        "text": "e { content:\"\\f00a\"; }\n\n.octicon-markdown:before { content:\"\\f0c9\"; }\n\n.octicon-megaphone:before { content:\"\\f077\"; }\n\n.octicon-mention:before { content:\"\\f0be\"; }\n\n.octicon-milestone:before { content:\"\\f075\"; }\n\n.octicon-mirror:before { content:\"\\f024\"; }\n\n.octicon-mortar-board:before { content:\"\\f0d7\"; }\n\n.octicon-mute:before { content:\"\\f080\"; }\n\n.octicon-no-newline:before { content:\"\\f09c\"; }\n\n.octicon-octoface:before { content:\"\\f008\"; }\n\n.octicon-organization:before { content:\"\\f037\"; }\n\n.",
        "file": "/Users/akash/Workspace/assignments/code-qa-api/data/grip-no-tests/grip/static/octicons/octicons.css",
        "start_idx": 6000
    },
    {
        "text": "octicon-package:before { content:\"\\f0c4\"; }\n\n.octicon-paintcan:before { content:\"\\f0d1\"; }\n\n.octicon-pencil:before { content:\"\\f058\"; }\n\n.octicon-person:before { content:\"\\f018\"; }\n\n.octicon-pin:before { content:\"\\f041\"; }\n\n.octicon-plug:before { content:\"\\f0d4\"; }\n\n.octicon-plus-small:before { content:\"\\f104\"; }\n\n.octicon-plus:before { content:\"\\f05d\"; }\n\n.octicon-primitive-dot:before { content:\"\\f052\"; }\n\n.octicon-primitive-square:before { content:\"\\f053\"; }\n\n.octicon-pulse:before { content:\"\\",
        "file": "/Users/akash/Workspace/assignments/code-qa-api/data/grip-no-tests/grip/static/octicons/octicons.css",
        "start_idx": 6500
    },
    {
        "text": "f085\"; }\n\n.octicon-question:before { content:\"\\f02c\"; }\n\n.octicon-quote:before { content:\"\\f063\"; }\n\n.octicon-radio-tower:before { content:\"\\f030\"; }\n\n.octicon-reply:before { content:\"\\f105\"; }\n\n.octicon-repo-clone:before { content:\"\\f04c\"; }\n\n.octicon-repo-force-push:before { content:\"\\f04a\"; }\n\n.octicon-repo-forked:before { content:\"\\f002\"; }\n\n.octicon-repo-pull:before { content:\"\\f006\"; }\n\n.octicon-repo-push:before { content:\"\\f005\"; }\n\n.octicon-repo:before { content:\"\\f001\"; }\n\n.octicon-rock",
        "file": "/Users/akash/Workspace/assignments/code-qa-api/data/grip-no-tests/grip/static/octicons/octicons.css",
        "start_idx": 7000
    },
    {
        "text": "et:before { content:\"\\f033\"; }\n\n.octicon-rss:before { content:\"\\f034\"; }\n\n.octicon-ruby:before { content:\"\\f047\"; }\n\n.octicon-search:before { content:\"\\f02e\"; }\n\n.octicon-server:before { content:\"\\f097\"; }\n\n.octicon-settings:before { content:\"\\f07c\"; }\n\n.octicon-shield:before { content:\"\\f0e1\"; }\n\n.octicon-sign-in:before { content:\"\\f036\"; }\n\n.octicon-sign-out:before { content:\"\\f032\"; }\n\n.octicon-smiley:before { content:\"\\f0e7\"; }\n\n.octicon-squirrel:before { content:\"\\f0b2\"; }\n\n.octicon-star:be",
        "file": "/Users/akash/Workspace/assignments/code-qa-api/data/grip-no-tests/grip/static/octicons/octicons.css",
        "start_idx": 7500
    },
    {
        "text": "fore { content:\"\\f02a\"; }\n\n.octicon-stop:before { content:\"\\f08f\"; }\n\n.octicon-sync:before { content:\"\\f087\"; }\n\n.octicon-tag:before { content:\"\\f015\"; }\n\n.octicon-tasklist:before { content:\"\\f0e5\"; }\n\n.octicon-telescope:before { content:\"\\f088\"; }\n\n.octicon-terminal:before { content:\"\\f0c8\"; }\n\n.octicon-text-size:before { content:\"\\f0e3\"; }\n\n.octicon-three-bars:before { content:\"\\f05e\"; }\n\n.octicon-thumbsdown:before { content:\"\\f0db\"; }\n\n.octicon-thumbsup:before { content:\"\\f0da\"; }\n\n.octicon-t",
        "file": "/Users/akash/Workspace/assignments/code-qa-api/data/grip-no-tests/grip/static/octicons/octicons.css",
        "start_idx": 8000
    },
    {
        "text": "ools:before { content:\"\\f031\"; }\n\n.octicon-trashcan:before { content:\"\\f0d0\"; }\n\n.octicon-triangle-down:before { content:\"\\f05b\"; }\n\n.octicon-triangle-left:before { content:\"\\f044\"; }\n\n.octicon-triangle-right:before { content:\"\\f05a\"; }\n\n.octicon-triangle-up:before { content:\"\\f0aa\"; }\n\n.octicon-unfold:before { content:\"\\f039\"; }\n\n.octicon-unmute:before { content:\"\\f0ba\"; }\n\n.octicon-unverified:before { content:\"\\f0e8\"; }\n\n.octicon-verified:before { content:\"\\f0e6\"; }\n\n.octicon-versions:before {",
        "file": "/Users/akash/Workspace/assignments/code-qa-api/data/grip-no-tests/grip/static/octicons/octicons.css",
        "start_idx": 8500
    },
    {
        "text": " content:\"\\f064\"; }\n\n.octicon-watch:before { content:\"\\f0e0\"; }\n\n.octicon-x:before { content:\"\\f081\"; }\n\n.octicon-zap:before { content:\"\\26a1\"; }\n\n",
        "file": "/Users/akash/Workspace/assignments/code-qa-api/data/grip-no-tests/grip/static/octicons/octicons.css",
        "start_idx": 9000
    },
    {
        "text": "{% extends \"base.html\" %}\n\n{% block title %}{% if title %}{{ title }}{% else %}{{ filename or '' }} - Grip{% endif %}{% endblock %}\n\n{%- block styles -%}\n  {%- for style_url in style_urls %}\n  <link rel=\"stylesheet\" href=\"{{ style_url }}\" />\n  {%- endfor %}\n  <link rel=\"stylesheet\" href=\"{{ url_for('static', filename='octicons/octicons.css') }}\" />\n  {%- if styles %}\n  <style>\n    {%- for style in styles %}\n    {{ style|safe }}\n    {%- endfor %}\n  </style>\n  {%- endif %}\n  <style>\n    /* Page tw",
        "file": "/Users/akash/Workspace/assignments/code-qa-api/data/grip-no-tests/grip/templates/index.html",
        "start_idx": 0
    },
    {
        "text": "eaks */\n    .preview-page {\n      margin-top: 64px;\n      margin-bottom: 21px;\n    }\n    /* User-content tweaks */\n    .timeline-comment-wrapper > .timeline-comment:after,\n    .timeline-comment-wrapper > .timeline-comment:before {\n      content: none;\n    }\n    /* User-content overrides */\n    .discussion-timeline.wide {\n      width: 920px;\n    }\n  </style>\n{%- endblock -%}\n\n{%- block scripts -%}\n  <script>\n    function showCanonicalImages() {\n      var images = document.getElementsByTagName('im",
        "file": "/Users/akash/Workspace/assignments/code-qa-api/data/grip-no-tests/grip/templates/index.html",
        "start_idx": 500
    },
    {
        "text": "g');\n      if (!images) {\n        return;\n      }\n      for (var index = 0; index < images.length; index++) {\n        var image = images[index];\n        if (image.getAttribute('data-canonical-src') && image.src !== image.getAttribute('data-canonical-src')) {\n          image.src = image.getAttribute('data-canonical-src');\n        }\n      }\n    }\n\n    function scrollToHash() {\n      if (location.hash && !document.querySelector(':target')) {\n        var element = document.getElementById('user-conte",
        "file": "/Users/akash/Workspace/assignments/code-qa-api/data/grip-no-tests/grip/templates/index.html",
        "start_idx": 1000
    },
    {
        "text": "nt-' + location.hash.slice(1));\n        if (element) {\n           element.scrollIntoView();\n        }\n      }\n    }\n\n    function autorefreshContent(eventSourceUrl) {\n      var initialTitle = document.title;\n      var contentElement = document.getElementById('grip-content');\n      var source = new EventSource(eventSourceUrl);\n      var isRendering = false;\n\n      source.onmessage = function(ev) {\n        var msg = JSON.parse(ev.data);\n        if (msg.updating) {\n          isRendering = true;\n   ",
        "file": "/Users/akash/Workspace/assignments/code-qa-api/data/grip-no-tests/grip/templates/index.html",
        "start_idx": 1500
    },
    {
        "text": "       document.title = '(Rendering) ' + document.title;\n        } else {\n          isRendering = false;\n          document.title = initialTitle;\n          contentElement.innerHTML = msg.content;\n          showCanonicalImages();\n        }\n      }\n\n      source.onerror = function(e) {\n        if (e.readyState === EventSource.CLOSED && isRendering) {\n          isRendering = false;\n          document.title = initialTitle;\n        }\n      }\n    }\n\n    window.onhashchange = function() {\n      scrollT",
        "file": "/Users/akash/Workspace/assignments/code-qa-api/data/grip-no-tests/grip/templates/index.html",
        "start_idx": 2000
    },
    {
        "text": "oHash();\n    }\n\n    window.onload = function() {\n      scrollToHash();\n    }\n\n    showCanonicalImages();\n\n    var autorefreshUrl = document.getElementById('preview-page').getAttribute('data-autorefresh-url');\n    if (autorefreshUrl) {\n      autorefreshContent(autorefreshUrl);\n    }\n  </script>\n{%- endblock -%}\n\n{%- block page -%}\n  <div id=\"preview-page\" class=\"preview-page\" data-autorefresh-url=\"{{ autorefresh_url if autorefresh_url }}\">\n    <main id=\"js-repo-pjax-container\">\n      <div class=\"",
        "file": "/Users/akash/Workspace/assignments/code-qa-api/data/grip-no-tests/grip/templates/index.html",
        "start_idx": 2500
    },
    {
        "text": "clearfix new-discussion-timeline container-xl px-3 px-md-4 px-lg-5\">\n        <div class=\"repository-content\">\n          <div class=\"clearfix\">\n            <div class=\"Layout Layout--flowRow-until-md Layout--sidebarPosition-end Layout--sidebarPosition-flowRow-end\">\n              <div class=\"Layout-main\">\n\n                {% if not user_content %}\n\n                  <div id=\"readme\" class=\"Box md Box--responsive\">\n                    {% if title or filename %}\n                      <div class=\"Box",
        "file": "/Users/akash/Workspace/assignments/code-qa-api/data/grip-no-tests/grip/templates/index.html",
        "start_idx": 3000
    },
    {
        "text": "-header d-flex border-bottom-0 flex-items-center flex-justify-between color-bg-default rounded-top-2\">\n                        <div class=\"d-flex flex-items-center\">\n                          <h2 class=\"Box-title\">\n                            {{ title or filename }}\n                          </h2>\n                        </div>\n                      </div>\n                    {% endif %}\n                    <div class=\"Box-body px-5 pb-5\">\n                      <article id=\"grip-content\" class=\"",
        "file": "/Users/akash/Workspace/assignments/code-qa-api/data/grip-no-tests/grip/templates/index.html",
        "start_idx": 3500
    },
    {
        "text": "markdown-body entry-content container-lg\">\n                        {{ content|safe }}\n                      </article>\n                    </div>\n                  </div>\n\n                {% else %}\n\n                  <div class=\"pull-discussion-timeline\">\n                    <div class=\"ml-0 pl-0 ml-md-6 pl-md-3\">\n                      <div class=\"TimelineItem pt-0\">\n                        <div class=\"timeline-comment-group TimelineItem-body my-0\">\n                          <div class=\"ml-n3 t",
        "file": "/Users/akash/Workspace/assignments/code-qa-api/data/grip-no-tests/grip/templates/index.html",
        "start_idx": 4000
    },
    {
        "text": "imeline-comment unminimized-comment comment previewable-edit editable-comment timeline-comment--caret reorderable-task-lists\">\n                            {% if title %}\n                              <div class=\"timeline-comment-header clearfix d-block d-sm-flex\">\n                                <h3 class=\"timeline-comment-header-text f5 text-normal\">\n                                  <strong class=\"css-truncate expandable\"><span class=\"author text-inherit css-truncate-target\">{{ title }}</span>",
        "file": "/Users/akash/Workspace/assignments/code-qa-api/data/grip-no-tests/grip/templates/index.html",
        "start_idx": 4500
    },
    {
        "text": "</strong>\n                                </h3>\n                              </div>\n                            {% endif %}\n                            <div class=\"edit-comment-hide\">\n                              <table class=\"d-block\">\n                                <tbody class=\"d-block\">\n                                  <tr class=\"d-block\">\n                                    <td class=\"d-block comment-body markdown-body\" id=\"grip-content\">\n                                      {{ content",
        "file": "/Users/akash/Workspace/assignments/code-qa-api/data/grip-no-tests/grip/templates/index.html",
        "start_idx": 5000
    },
    {
        "text": "|safe }}\n                                    </td>\n                                  </tr>\n                                </tbody>\n                              </table>\n                            </div>\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n\n                {% endif %}\n\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </main>\n  </div>\n{%- endblock ",
        "file": "/Users/akash/Workspace/assignments/code-qa-api/data/grip-no-tests/grip/templates/index.html",
        "start_idx": 5500
    },
    {
        "text": "-%}\n",
        "file": "/Users/akash/Workspace/assignments/code-qa-api/data/grip-no-tests/grip/templates/index.html",
        "start_idx": 6000
    },
    {
        "text": "<!DOCTYPE html>\n<html lang=\"en\" data-color-mode={{ data_color_mode }} data-light-theme={{ data_light_theme }} data-dark-theme={{ data_dark_theme }}>\n<head>\n  <meta charset=\"utf-8\" />\n  <title>{% block title %}Grip{% endblock %}</title>\n  <link rel=\"icon\" href=\"{{ favicon or url_for('static', filename='favicon.ico') }}\" />\n  {%- block styles %}{% endblock %}\n</head>\n<body>\n  <div class=\"page\">\n    {% block page %}{% endblock %}\n  </div>\n  {%- block scripts %}{% endblock %}\n</body>\n</html>\n",
        "file": "/Users/akash/Workspace/assignments/code-qa-api/data/grip-no-tests/grip/templates/base.html",
        "start_idx": 0
    },
    {
        "text": "{% extends \"base.html\" %}\n\n{% block title %}GitHub rate limit reached - Grip{% endblock %}\n\n\n{%- block styles -%}\n  <style>\n    body {\n      font-family: \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n      font-size: 14px;\n      line-height: 1.42em;\n    }\n    code {\n      font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace;\n      background-color: #f8f8f8;\n      border: 1px solid #ddd;\n      border-radius: 3px;\n      font-size: 12px;\n      line-height: 19px;\n      overflow: aut",
        "file": "/Users/akash/Workspace/assignments/code-qa-api/data/grip-no-tests/grip/templates/limit.html",
        "start_idx": 0
    },
    {
        "text": "o;\n      padding: 2px 10px;\n    }\n    .error-page {\n      margin: 32px auto;\n      width: 500px;\n    }\n    .error-page.authenticated {\n      margin: 64px auto;\n      width: 600px;\n    }\n    .error-block {\n      background: #f5f5f5;\n      border: 1px solid #ddd;\n      border-radius: 3px;\n      padding: 16px 32px;\n    }\n    .error-description {\n      padding: 16px 32px;\n    }\n  </style>\n{%- endblock -%}\n\n\n{%- block scripts -%}\n  <script>\n    function scrollToHash() {\n      if (location.hash && !do",
        "file": "/Users/akash/Workspace/assignments/code-qa-api/data/grip-no-tests/grip/templates/limit.html",
        "start_idx": 500
    },
    {
        "text": "cument.querySelector(\":target\")) {\n        var elements = document.getElementsByName('user-content-' + location.hash.slice(1));\n        if (elements.length > 0) {\n          elements[elements.length - 1].scrollIntoView();\n        }\n      }\n    }\n    window.onhashchange = function() {\n      scrollToHash();\n    }\n    window.onload = function() {\n      scrollToHash();\n    }\n  </script>\n{%- endblock -%}\n\n{%- block page -%}\n  <div class=\"error-page {{ 'authenticated' if is_authenticated }}\">\n    <div ",
        "file": "/Users/akash/Workspace/assignments/code-qa-api/data/grip-no-tests/grip/templates/limit.html",
        "start_idx": 1000
    },
    {
        "text": "class=\"error-block\">\n      <h1>GitHub Rate Limit Reached</h1>\n      <p>\n        The <a href=\"https://developer.github.com/v3/#rate-limiting\">GitHub API rate limit</a>\n        {% if is_authenticated %} for basic auth {% endif %}\n        has been reached for the hour.\n      </p>\n      {% if is_authenticated %}\n        <p>\n          Sorry for the inconvenience.\n        </p>\n      {% endif %}\n    </div>\n\n    {% if not is_authenticated %}\n      <div class=\"error-description\">\n        <h2>What?</h2>\n ",
        "file": "/Users/akash/Workspace/assignments/code-qa-api/data/grip-no-tests/grip/templates/limit.html",
        "start_idx": 1500
    },
    {
        "text": "       <p>\n          GitHub imposes a limit of <strong>60 requests/hour</strong> when using their API without authentication.\n        </p>\n\n        <h2>Why?</h2>\n        <p>\n          This prevents people from anonymously abusing GitHub's system.\n        </p>\n        <p>\n          As for Grip, it's built to appear as close to GitHub as possible. Using\n          GitHub's API allows Grip to immediately and accurately reflect any updates\n          from GitHub, without the delay of busy maintainers ",
        "file": "/Users/akash/Workspace/assignments/code-qa-api/data/grip-no-tests/grip/templates/limit.html",
        "start_idx": 2000
    },
    {
        "text": "or requiring you to upgrade.\n        </p>\n\n        <h2>Ok, fine. Where do I go from here?</h2>\n        <p>\n          Until the <a href=\"https://github.com/joeyespo/grip/issues/35\">offline renderer</a> is complete, you can run Grip using <br />\n          the <code>--user</code> and <code>--pass</code> arguments to use basic auth, <br />\n          giving you <strong>5,000 requests/hour</strong>. Run <code>grip -h</code> for details.\n        </p>\n        <p>\n          I do apologize for the inconve",
        "file": "/Users/akash/Workspace/assignments/code-qa-api/data/grip-no-tests/grip/templates/limit.html",
        "start_idx": 2500
    },
    {
        "text": "nience. If you need help, or have ideas on improving this\n          experience, please reach out <a href=\"mailto:{{ email }}?subject=I+just+hit+GitHub's+rate+limit+with+grip\" target=\"_blank\">joe@joeyespo.com</a>\n        </p>\n      </div>\n    {% endif %}\n  </div>\n{%- endblock -%}\n",
        "file": "/Users/akash/Workspace/assignments/code-qa-api/data/grip-no-tests/grip/templates/limit.html",
        "start_idx": 3000
    },
    {
        "text": "\"\"\"Utilities for writing code that runs on Python 2 and 3\"\"\"\n\n# Copyright (c) 2010-2015 Benjamin Peterson\n#\n# Permission is hereby granted, free of charge, to any person obtaining a copy\n# of this software and associated documentation files (the \"Software\"), to deal\n# in the Software without restriction, including without limitation the rights\n# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n# copies of the Software, and to permit persons to whom the Software is\n# furn",
        "file": "/Users/akash/Workspace/assignments/code-qa-api/data/grip-no-tests/grip/vendor/six.py",
        "start_idx": 0
    },
    {
        "text": "ished to do so, subject to the following conditions:\n#\n# The above copyright notice and this permission notice shall be included in all\n# copies or substantial portions of the Software.\n#\n# THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n# LIABILI",
        "file": "/Users/akash/Workspace/assignments/code-qa-api/data/grip-no-tests/grip/vendor/six.py",
        "start_idx": 500
    },
    {
        "text": "TY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n# SOFTWARE.\n\nfrom __future__ import absolute_import\n\n# [...]\n\n__author__ = \"Benjamin Peterson <benjamin@python.org>\"\n__version__ = \"1.10.0\"\n\n\n# [...]\n\n\ndef add_metaclass(metaclass):\n    \"\"\"Class decorator for creating a class with a metaclass.\"\"\"\n    def wrapper(cls):\n        orig_vars = cls.__dict__.copy()\n        slots = orig_vars.get('__slots__",
        "file": "/Users/akash/Workspace/assignments/code-qa-api/data/grip-no-tests/grip/vendor/six.py",
        "start_idx": 1000
    },
    {
        "text": "')\n        if slots is not None:\n            if isinstance(slots, str):\n                slots = [slots]\n            for slots_var in slots:\n                orig_vars.pop(slots_var)\n        orig_vars.pop('__dict__', None)\n        orig_vars.pop('__weakref__', None)\n        return metaclass(cls.__name__, cls.__bases__, orig_vars)\n    return wrapper\n\n\n# [...]\n",
        "file": "/Users/akash/Workspace/assignments/code-qa-api/data/grip-no-tests/grip/vendor/six.py",
        "start_idx": 1500
    },
    {
        "text": "\"\"\"\nA more liberal autolinker\n\nInspired by Django's urlize function.\n\nPositive examples:\n\n>>> import markdown\n>>> md = markdown.Markdown(extensions=['urlize'])\n\n>>> md.convert('http://example.com/')\nu'<p><a href=\"http://example.com/\">http://example.com/</a></p>'\n\n>>> md.convert('go to http://example.com')\nu'<p>go to <a href=\"http://example.com\">http://example.com</a></p>'\n\n>>> md.convert('example.com')\nu'<p><a href=\"http://example.com\">example.com</a></p>'\n\n>>> md.convert('example.net')\nu'<p><a ",
        "file": "/Users/akash/Workspace/assignments/code-qa-api/data/grip-no-tests/grip/vendor/mdx_urlize.py",
        "start_idx": 0
    },
    {
        "text": "href=\"http://example.net\">example.net</a></p>'\n\n>>> md.convert('www.example.us')\nu'<p><a href=\"http://www.example.us\">www.example.us</a></p>'\n\n>>> md.convert('(www.example.us/path/?name=val)')\nu'<p>(<a href=\"http://www.example.us/path/?name=val\">www.example.us/path/?name=val</a>)</p>'\n\n>>> md.convert('go to <http://example.com> now!')\nu'<p>go to <a href=\"http://example.com\">http://example.com</a> now!</p>'\n\nNegative examples:\n\n>>> md.convert('del.icio.us')\nu'<p>del.icio.us</p>'\n\"\"\"\n\nimport markd",
        "file": "/Users/akash/Workspace/assignments/code-qa-api/data/grip-no-tests/grip/vendor/mdx_urlize.py",
        "start_idx": 500
    },
    {
        "text": "own\n\n\nURLIZE_RE = '(%s)' % '|'.join([\n    r'<(?:f|ht)tps?://[^>]*>',\n    r'\\b(?:f|ht)tps?://[^)<>\\s]+[^.,)<>\\s]',\n    r'\\bwww\\.[^)<>\\s]+[^.,)<>\\s]',\n    r'[^(<\\s]+\\.(?:com|net|org)\\b',\n])\n\n\nclass UrlizePattern(markdown.inlinepatterns.Pattern):\n    \"\"\"\n    Return a link Element given an autolink (`http://example/com`).\n    \"\"\"\n    def handleMatch(self, m):\n        url = m.group(2)\n\n        if url.startswith('<'):\n            url = url[1:-1]\n\n        text = url\n\n        if not url.split('://')[0] ",
        "file": "/Users/akash/Workspace/assignments/code-qa-api/data/grip-no-tests/grip/vendor/mdx_urlize.py",
        "start_idx": 1000
    },
    {
        "text": "in ['http', 'https', 'ftp']:\n            if '@' in url and not '/' in url:\n                url = 'mailto:' + url\n            else:\n                url = 'http://' + url\n\n        el = markdown.util.etree.Element('a')\n        el.set('href', url)\n        el.text = markdown.util.AtomicString(text)\n        return el\n\n\nclass UrlizeExtension(markdown.Extension):\n    \"\"\"\n    Urlize Extension for Python-Markdown.\n    \"\"\"\n    def extendMarkdown(self, md, md_globals):\n        \"\"\"\n        Replace autolink w",
        "file": "/Users/akash/Workspace/assignments/code-qa-api/data/grip-no-tests/grip/vendor/mdx_urlize.py",
        "start_idx": 1500
    },
    {
        "text": "ith UrlizePattern\n        \"\"\"\n        md.inlinePatterns['autolink'] = UrlizePattern(URLIZE_RE, md)\n\n\ndef makeExtension(configs=None):\n    return UrlizeExtension(configs=configs)\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()\n",
        "file": "/Users/akash/Workspace/assignments/code-qa-api/data/grip-no-tests/grip/vendor/mdx_urlize.py",
        "start_idx": 2000
    }
]